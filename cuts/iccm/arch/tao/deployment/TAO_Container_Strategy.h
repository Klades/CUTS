// -*- C++ -*-

//=============================================================================
/**
 *  @file         TAO_Container_Strategy.h
 *
 *  $Id$
 *
 *  Code generated by iCCM skeleton project generator that is include
 *  in the CUTS (http://cuts.cs.iupui.edu) and developed by:
 *
 *      Software Engineering & Distributed System (SEDS) Group
 *      Indiana Univesity-Purdue University Indianapolis
 *      Indianapolis, IN 46202
 */
//=============================================================================

#ifndef _ICCM_TAO_CONTAINER_STRATEGY_H_
#define _ICCM_TAO_CONTAINER_STRATEGY_H_

#include "cuts/iccm/deployment/Container_Strategy_T.h"

#include "TAO_Deployment_Handlers_export.h"

namespace iCCM
{

// Forward decl.
class TAO_Container;

/**
 * @class TAO_Container_Strategy
 *
 * Implementation of the iCCM container startegy for TAO.
 */
class ICCM_TAO_DEPLOYMENT_HANDLERS_Export TAO_Container_Strategy :
  public Container_Strategy_T <TAO_Container>
{
public:
  /// Type defintion of TAO_Container_Strategy base type.
  typedef Container_Strategy_T <TAO_Container> base_type;

  /**
   * Initializing constructor
   *
   * @param[in]     container       Container hosting the strategy
   */
  TAO_Container_Strategy (TAO_Container & container);

  /// Destructor.
  virtual ~TAO_Container_Strategy (void);

  /**
   * Callback for installing a servant. Implementing this method is
   * optional. It primarily is used to do architecture-specific installation
   * procedure above and beyond DAnCE.
   *
   * @param[in]     servant         Servant to install
   */
  virtual void install_servant (::PortableServer::Servant servant);

  /**
   * Configure the servant. The configuration values are those
   * attached to a component instance.
   *
   * @param[in]     servant         Servant to configure
   * @param[in]     values          Configuration values
   */
  virtual void configure_servant (::PortableServer::Servant servant,
                                  const ::Components::ConfigValues & values);

  /**
   * Callback for removing a servant. Implementing this method is
   * optional. If you implement install_servant (), then it is
   * recommended that you implement this method to provide consist
   * management of the servants.
   *
   * @param[in]     servant         Servant to install
   */
  virtual void remove_servant (::PortableServer::Servant servant);
};

}

#if defined (__CUTS_INLINE__)
#include "TAO_Container_Strategy.inl"
#endif

#endif  // !defined _ICCM_TAO_CONTAINER_STRATEGY_H_
