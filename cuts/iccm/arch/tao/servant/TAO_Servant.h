// -*- C++ -*-

//==============================================================================
/**
 *  @file       TAO_Servant.h
 *
 *  $Id$
 *
 *  Code generated by iCCM skeleton project generator that is include
 *  in the CUTS (http://cuts.cs.iupui.edu) and developed by:
 *
 *      Software Engineering & Distributed System (SEDS) Group
 *      Indiana Univesity-Purdue University Indianapolis
 *      Indianapolis, IN 46202
 */
//==============================================================================

#ifndef _ICCM_TAO_SERVANT_H_
#define _ICCM_TAO_SERVANT_H_

#include "cuts/iccm/servant/Servant.h"

#include "TAO_EventConsumer.h"
#include "TAO_Publisher.h"
#include "TAO_Publisher_Table.h"

#define ICCM_TAO_REGISTER_VALUE_FACTORY(ORB,FACTORY,VALUETYPE)\
{\
  CORBA::ValueFactory factory = new FACTORY; \
  CORBA::ValueFactory prev_factory = ORB->register_value_factory \
    (VALUETYPE::_tao_obv_static_repository_id (), \
    factory); \
 if (prev_factory) prev_factory->_remove_ref (); \
 factory->_remove_ref ();\
}

namespace iCCM
{

/**
 * @class TAO_Servant
 *
 * Base class for all TAO servant objects. This class enables
 * the container to send commands to the servant, such as
 * domain-specific configuration information.
 */
class ICCM_TAO_SVNT_Export TAO_Servant :
  public Servant
{
public:
  /// Trait definitions for iCCM::Servant_T object.
  typedef TAO_EventConsumer eventconsumer_type;
  typedef TAO_Publisher publisher_type;
  typedef TAO_Publisher_Table publisher_table_type;

  /// Default constructor.
  TAO_Servant (const char * name);

  /// Destructor.
  virtual ~TAO_Servant (void);

  /// Register event value factories
  virtual void register_value_factories (::CORBA::ORB_ptr orb);
};

}

#if defined (__CUTS_INLINE__)
#include "TAO_Servant.inl"
#endif

#endif  // !defined _ICCM_TAO_SERVANT_H_
