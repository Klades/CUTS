// -*- C++ -*-

//=============================================================================
/**
 *  @file         TCPIP_Servant_T.h
 *
 *  $Id$
 *
 *  Code generated by iCCM skeleton project generator that is include
 *  in the CUTS (http://cuts.cs.iupui.edu) and developed by:
 *
 *      Software Engineering & Distributed System (SEDS) Group
 *      Indiana Univesity-Purdue University Indianapolis
 *      Indianapolis, IN 46202
 */
//=============================================================================

#ifndef _ICCM_TCPIP_SERVANT_T_H_
#define _ICCM_TCPIP_SERVANT_T_H_

#include "cuts/iccm/servant/Servant_T.h"

#include "TCPIP_Servant.h"
#include "TCPIP_EventConsumer_T.h"
#include "TCPIP_Publisher_T.h"
#include "TCPIP_Publisher_Table_T.h"
#include "cuts/iccm/arch/tcpip/stub/TCPIP_Servant_VTable_T.h"

namespace iCCM
{

/**
 * @class TCPIP_Servant_T
 *
 * Template implementation of TCPIP servant. This implementation
 * is the base class for all servants.
 */
template <typename T, typename CONTEXT, typename EXECUTOR, typename POA_EXEC>
class TCPIP_Servant_T :
  public Servant_T <T, CONTEXT, EXECUTOR, POA_EXEC, TCPIP_Servant>
{
public:
  /// Type definition of the base type.
  typedef Servant_T <T, CONTEXT, EXECUTOR, POA_EXEC, TCPIP_Servant> base_type;

  /// Type definition of the consumer map.
  typedef typename base_type::consumer_map_type consumer_map_type;

  /// Type definition of the publisher map.
  typedef typename base_type::emits_map_type emits_map_type;

  /// Type definition of the publisher table map.
  typedef typename base_type::publishes_map_type publishes_map_type;

  /// Initializing constructor.
  TCPIP_Servant_T (
    T * _this,
    const char * name,
    ::PortableServer::POA_ptr port_poa,
    typename EXECUTOR::_ptr_type impl);

  /// Destructor.
  virtual ~TCPIP_Servant_T (void);

  // Method for handling the event. It will dispatch the events
  // to the correct method.
  virtual int handle_event (ACE_UINT32 id, ACE_InputCDR & input);

protected:
  /// Type definition of the virtual table.
  typedef CUTS_TCPIP_Servant_VTable_T <T> vtable_type;

  /// Virtual table for the servant.
  static vtable_type table_;
};

}

#if defined (__CUTS_INLINE__)
#include "TCPIP_Servant_T.inl"
#endif

#include "TCPIP_Servant_T.cpp"

#endif  // !defined _ICCM_TCPIP_SERVANT_T_H_
