// -*- C++ -*-

//==============================================================================
/**
 *  @file       TCPIP_Servant.h
 *
 *  $Id$
 *
 *  Code generated by iCCM skeleton project generator that is include
 *  in the CUTS (http://cuts.cs.iupui.edu) and developed by:
 *
 *      Software Engineering & Distributed System (SEDS) Group
 *      Indiana Univesity-Purdue University Indianapolis
 *      Indianapolis, IN 46202
 */
//==============================================================================

#ifndef _ICCM_TCPIP_SERVANT_H_
#define _ICCM_TCPIP_SERVANT_H_

#include "cuts/iccm/servant/Servant.h"

#include "TCPIP_EventConsumer.h"
#include "TCPIP_Publisher.h"
#include "TCPIP_Publisher_Table.h"
#include "ace/UUID.h"

// Forward decl.
class TCPIP_ORB;
class CUTS_TCPIP_Servant_Manager;

namespace iCCM
{

/**
 * @class TCPIP_Servant
 *
 * Base class for all TCPIP servant objects. This class enables
 * the container to send commands to the servant, such as
 * domain-specific configuration information.
 */
class ICCM_TCPIP_SVNT_Export TCPIP_Servant :
  public Servant
{
public:
  // Friend decl.
  friend class ::CUTS_TCPIP_Servant_Manager;

  /// Trait definitions for iCCM::Servant_T object.
  typedef TCPIP_EventConsumer eventconsumer_type;
  typedef TCPIP_Publisher publisher_type;
  typedef TCPIP_Publisher_Table publisher_table_type;

  /// Default constructor.
  TCPIP_Servant (const char * name);

  /// Destructor.
  virtual ~TCPIP_Servant (void);

  /**
   * Get the UUID assigned to the object. If the object has not
   * be activated, then the UUID will be ACE_Utils::NIL_UUID.
   * Whenever the object is deactivated, then the UUID  will be
   * ACE_Utils::NIL_UUID.
   */
  const ACE_Utils::UUID & the_UUID (void) const;

  const TCPIP_ORB * the_ORB (void) const;

  /**
   * Handle an event received on the TCP/IP port.
   *
   * @param[in]         id          Id of the event
   * @param[in]         ev          Message block containing event data
   * @retval            0           Success
   * @retval            -1          Failure
   */
  virtual int handle_event (ACE_UINT32 id, ACE_InputCDR & input);

private:
  /// UUID assigned to the objeect.
  ACE_Utils::UUID uuid_;

  /// ORB the servant was activated under.
  TCPIP_ORB * orb_;
};

}

#if defined (__CUTS_INLINE__)
#include "TCPIP_Servant.inl"
#endif

#endif  // !defined _ICCM_TCPIP_SERVANT_H_
