# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.iCCM_CHAOS_Compiler
#
# $Id: gnu.mpd 95691 2012-04-10 20:11:35Z mitza $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
no_hidden_visibility = 1

MAKEFILE         = GNUmakefile.iCCM_CHAOS_Compiler
DEPENDENCY_FILE  = .depend.iCCM_CHAOS_Compiler
BIN_UNCHECKED    = iccm_chaos

LIB_PREFIX      ?= lib

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  $(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp \
  $(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp \
  $(TAO_ROOT)/TAO_IDL/tao_idl.cpp \
  Compiler.cpp \
  Context.cpp

VPATH = .:$(TAO_ROOT)/TAO_IDL/driver:$(TAO_ROOT)/TAO_IDL

#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
LDLIBS = -liCCM_Compiler -lTAO_IDL_FE -lACE -lCodeGenerationKit

PRJ_TYPE = rtp

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSBIN ?= $(call COLLAPSE_SLASHES,../../../../../bin)
ifeq ($(INSBIN),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSBIN = $(PWD)
endif
OUTPUT_DIRECTORY = $(if $(ARCH),$(if $(INSBIN),$(INSBIN)/$(ARCH)),$(INSBIN))

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/iCCM_CHAOS_Compiler
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,iCCM_Compiler TAO_IDL_FE ACE CodeGenerationKit,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(BOOST_ROOT)/lib $(if $(ARCH),$(BOOST_ROOT)/lib/$(ARCH)) $(CCF_ROOT)/CCF $(if $(ARCH),$(CCF_ROOT)/CCF/$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../../../../lib $(if $(ARCH),../../../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),iCCM_Compiler TAO_IDL_FE ACE CodeGenerationKit)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifeq ($(boost),1)
ifeq ($(LIBCHECK), 1)
BIN    = $(BIN_UNCHECKED)$(EXEEXT)
ifdef ARCH
  ARCH_BIN = $(ARCH)/$(BIN)
endif #ARCH
else
  all: lib_warning
endif
else
  all: require_warning
endif

# If it contains ../ at all use notdir.
OBJS   = $(foreach var, $(addsuffix .$(OBJEXT), $(basename $(FILES)) $(RESOURCES)), $(if $(findstring ../,$(var)),$(notdir $(var)),$(var)))
SRC    = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU

ifneq ($(INSBIN),)
ifneq ($(INSBIN),.)
  INSTALL = $(VBIN:%=$(INSBIN)/%)
  CLEANUP_INSTALL += $(CLEANUP_BIN:%=$(INSBIN)/$(if $(ARCH),$(ARCH)/)%$(VAR)$(EXEEXT))
endif
endif

include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

$(VDIR)$(TAO_ROOT)/TAO_IDL/driver/drv_args.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp
	@$(MKDIR) $(VDIR)$(TAO_ROOT)/TAO_IDL/driver
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)$(TAO_ROOT)/TAO_IDL/driver/drv_args.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp
	@$(MKDIR) $(VSHDIR)$(TAO_ROOT)/TAO_IDL/driver
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
endif

$(VDIR)$(TAO_ROOT)/TAO_IDL/driver/drv_preproc.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp
	@$(MKDIR) $(VDIR)$(TAO_ROOT)/TAO_IDL/driver
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)$(TAO_ROOT)/TAO_IDL/driver/drv_preproc.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp
	@$(MKDIR) $(VSHDIR)$(TAO_ROOT)/TAO_IDL/driver
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
endif

$(VDIR)$(TAO_ROOT)/TAO_IDL/tao_idl.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/tao_idl.cpp
	@$(MKDIR) $(VDIR)$(TAO_ROOT)/TAO_IDL
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
	${MVCMD}

ifneq ($(VSHDIR), $(VDIR))
$(VSHDIR)$(TAO_ROOT)/TAO_IDL/tao_idl.$(OBJEXT): $(TAO_ROOT)/TAO_IDL/tao_idl.cpp
	@$(MKDIR) $(VSHDIR)$(TAO_ROOT)/TAO_IDL
	$(COMPILE.cc) $(ACE_USE_PCH_OPT) $(PIC) $(CC_OUTPUT_FLAG)$(CC_OUTPUT_FLAG_SEP)$@ $<
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(BOOST_ROOT)/lib -L$(CCF_ROOT)/CCF -L$(ACE_ROOT)/lib -L../../../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(BOOST_ROOT)/lib $(if $(ARCH),-L$(BOOST_ROOT)/lib/$(ARCH)) -L$(CCF_ROOT)/CCF $(if $(ARCH),-L$(CCF_ROOT)/CCF/$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../../../../lib $(if $(ARCH),-L../../../../../lib/$(ARCH))
endif
CPPFLAGS     += -I$(BOOST_ROOT)/include/$(BOOST_VERSION) -I$(BOOST_ROOT)/. -I$(CCF_ROOT) -I../../../../../contrib/CCF/utility -I$(ACE_ROOT) -I$(TAO_ROOT)/TAO_IDL/fe -I$(TAO_ROOT)/TAO_IDL/include -I../../../../.. -I../../../../../MDE -I$(TAO_ROOT) -I../../../../../cuts/iccm/compiler -I../../../../../cuts/iccm/compiler/includes
CPPFLAGS     += -DACE_HAS_VERSIONED_NAMESPACE=1
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS
  ifeq ($(link_groups), 1)
    LDLIBS := -Wl,--start-group $(LDLIBS) -Wl,--end-group
  endif
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
ifeq ($(TAO_IDL_PREPROCESSOR),)
CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\"$(strip $(CXX))\"
else
CPPFLAGS += -DTAO_IDL_PREPROCESSOR=\"$(subst \,\,$(TAO_IDL_PREPROCESSOR))\"
endif

VPATH = $(TAO_ROOT)/TAO_IDL $(TAO_ROOT)/TAO_IDL/driver

ifeq ($(static_libs_only), 1)
ifneq ($(with_ld), macosx)
LDFLAGS += -static
endif
endif

lib_warning:
	@echo iCCM_CHAOS_Compiler will not be built due to the following missing library: $(LIBCHECK) >&2

ifneq ($(boost),1)
requires_disabled_macros += boost
endif
require_warning:
	@echo iCCM_CHAOS_Compiler will not be built due to the following disabled make macros: $(requires_disabled_macros)>&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif


ifneq ($(VXWORKSLINK),1)
ifeq ($(static_libs_only), 1)
  ifeq ($(use_dep_libs), 1)
    DEPLIBS = $(foreach lib, iCCM_Compiler TAO_IDL_FE ACE CodeGenerationKit , $(foreach libpath, . $(BOOST_ROOT)/lib $(CCF_ROOT)/CCF $(ACE_ROOT)/lib ../../../../../lib, $(wildcard $(libpath)/$(LIB_PREFIX)$(lib).$(LIBEXT))))
  endif
endif

$(VBIN): $(addprefix $(VDIR), $(OBJS)) $(DEPLIBS)
  ifneq (,$(LINK.cc.override))
	$(LINK.cc.override)
  else
	$(LINK.cc) $(LDFLAGS) $(CC_OUTPUT_FLAG) $@ $(filter-out %.a,$^) $(VLDLIBS) $(POSTLINK)
  endif
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
ifeq ($(boost),1)
	@-:
endif


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  )

INST_TAGS = exe_output
INST_LOCATIONS = -o exe_output=bin

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
ifeq ($(boost),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif
endif

#BEGIN MPC-Generated Install Info
#build_files:
#CHAOS_Compiler.mpc
#
#header_files:
#$(TAO_ROOT)/TAO_IDL/include/drv_extern.h
#../../../../../cuts/iccm/compiler/includes/be_extern.h
#../../../../../cuts/iccm/compiler/includes/be_init.hpp
#Context.h
#
#source_files:
#$(TAO_ROOT)/TAO_IDL/driver/drv_args.cpp
#$(TAO_ROOT)/TAO_IDL/driver/drv_preproc.cpp
#$(TAO_ROOT)/TAO_IDL/tao_idl.cpp
#Compiler.cpp
#Context.cpp
#
#exe_output:
#../../../../../bin iccm_chaos

#END MPC-Generated Install Info

