// -*- IDL -*-

//=============================================================================
/**
 * @file    performance.idl
 *
 * $Id$
 *
 * @author James H. Hill <hillj@isis.vanderbilt.edu>
 */
//=============================================================================

#ifndef _CUTS_PERFORMANCE_IDL_
#define _CUTS_PERFORMANCE_IDL_

#include "TimeValue.idl"

module CUTS
{
  //===========================================================================
  /**
   * @struct Endpoint_Time
   *
   * The time value for reaching an endpoint of a component. The
   * endpoint can be either a facet or event source. The \a unique_id for
   * the endpoint is the same as the \a unique_id in the Port_Description.
   */
  //===========================================================================

  struct Endpoint_Time
  {
    /// Unique id of the endpoint.
    long unique_id;

    /// The size of the endpoint.
    unsigned long datasize;

    /// Timing information for the endpoint.
    TimeValue exittime;
  };

  /// Type defintition for a listing of endpoints.
  typedef sequence <Endpoint_Time> Endpoint_Times;

  //===========================================================================
  /**
   * @struct Action_Time
   *
   * The time value for an action, or operation, in a component. The action
   * can be any action type, such as connecting to a database, allocating
   * memory, or performing a CPU intensive operation.
   */
  //===========================================================================

  struct Action_Time
  {
    /// The unique id of the action.
    long unique_id;

    /// The type/classification of the action.
    long type;

    /// The measured duration of the action.
    TimeValue duration;
  };

  /// Type definition for a listing of action times.
  typedef sequence <Action_Time> Action_Times;

  //===========================================================================
  /**
   * @struct Metric_Record
   *
   * Record containing metrics for a single event. The record contains
   * the sender of the event that generated this record. It also contains
   * the queueing and processing time (close_time - open_time) for the
   * event. Lastly, the time when the event generated new events to send
   * to other components is captured.
   */
  //===========================================================================

  struct Metric_Record
  {
    /// Unique id of component that sent event to create record.
    long sender;

    /// Open time of the record.
    TimeValue open_time;

    /// Close time of the record.
    TimeValue close_time;

    /// Queueing time for the event.
    TimeValue queue_time;

    /// Log of the endpoints for this record.
    Endpoint_Times ep_times;

    /// Log of the action times for a record.
    Action_Times action_log;
  };

  /// Type definition for a collection of Metric_Record objects.
  typedef sequence <Metric_Record> Metric_Records;

  //===========================================================================
  /**
   * @struct Port_Metric
   *
   * The timing information for a specific port. The timing information
   * contains a summary and raw data of all the collected metrics. The
   * \a history is optional.
   */
  //===========================================================================

  struct Port_Metric
  {
    /// Unique id for the port metric.
    long unique_id;

    /// Collection of all the records collected.
    Metric_Records record_log;
  };

  /// Type definition for a collection of port metrics.
  typedef sequence <Port_Metric> Port_Metrics;

  //===========================================================================
  /**
   * @struct Component_Metric
   *
   * Timing information for a component.
   */
  //===========================================================================

  struct Component_Metric
  {
    /// Unique id for the component.
    long unique_id;

    /// Time of collection.
    TimeValue collection_time;

    /// Collection of port metrics for the component.
    Port_Metrics ports;
  };
};

#endif  // !defined _CUTS_PERFORMANCE_IDL_
