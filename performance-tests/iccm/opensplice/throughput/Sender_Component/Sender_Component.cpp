// This file was generated by:
// $Id$

#include "Sender_Component.h"
#include "ace/streams.h"

namespace SenderComponentImpl
{
  //
  // SenderComponent
  //
  SenderComponent::SenderComponent (void)
    : datasize_ (0)
  {
  }

  //
  // ~SenderComponent
  //
  SenderComponent::~SenderComponent (void)
  {
  }

  //
  // ccm_activate
  //
  void SenderComponent::ccm_activate (void)
  {
    ACE_ERROR ((LM_DEBUG,
                ACE_TEXT ("%T (%t) - %M - running test with data size\n"),
                this->datasize_));

    switch (this->datasize_)
    {
    case 8:
      this->task_.reset (
        new SenderComponent_Task_T <Size8DataEvent> (this->ctx_.in (),
                                                     &iCCM_SenderComponent_Context::push_size8data,
                                                     &iCCM_SenderComponent_Context::new_size8data_event));
      break;

    case 16:
      this->task_.reset (
        new SenderComponent_Task_T <Size16DataEvent> (this->ctx_.in (),
                                                      &iCCM_SenderComponent_Context::push_size16data,
                                                      &iCCM_SenderComponent_Context::new_size16data_event));
      break;

    case 32:
      this->task_.reset (
        new SenderComponent_Task_T <Size32DataEvent> (this->ctx_.in (),
                                                      &iCCM_SenderComponent_Context::push_size32data,
                                                      &iCCM_SenderComponent_Context::new_size32data_event));
      break;

    case 64:
      this->task_.reset (
        new SenderComponent_Task_T <Size64DataEvent> (this->ctx_.in (),
                                                      &iCCM_SenderComponent_Context::push_size64data,
                                                      &iCCM_SenderComponent_Context::new_size64data_event));
      break;

    default:
      ACE_ERROR ((LM_ERROR,
                  ACE_TEXT ("%T (%t) - %M - unknown data size %d\n"),
                  this->datasize_));
    }


    if (0 != this->task_.get ())
      this->task_->activate ();

    // Start the timer.
    this->timer_.start ();
  }

  //
  // ccm_passivate
  //
  void SenderComponent::ccm_passivate (void)
  {
    // Store the task, and stop the timer.
    this->timer_.stop ();

    this->task_->deactivate ();
    this->task_->wait ();

    // Calculate the events/second.
    ACE_hrtime_t elapsed;
    this->timer_.elapsed_time (elapsed);

    if (0 != this->task_.get ())
    {
      double tput = ((double)this->task_->count () / (double)elapsed) * (double)ACE_ONE_SECOND_IN_NSECS;

      ACE_ERROR ((LM_ERROR,
                  ACE_TEXT ("# events sent: %d\n")
                  ACE_TEXT ("sender throughput: %f\n"),
                  this->task_->count (),
                  tput));
    }
  }

  //
  // datasize
  //
  void SenderComponent::datasize (CORBA::UShort val)
  {
    this->datasize_ = val;
  }

  //
  // datasize
  //
  CORBA::UShort SenderComponent::datasize (void)
  {
    return this->datasize_;
  }
}

//
// create_SenderComponent_Impl
//
::Components::EnterpriseComponent_ptr
create_TPUT_Sender_Component_Impl (void)
{
  ::Components::EnterpriseComponent_ptr retval =
    ::Components::EnterpriseComponent::_nil ();

  ACE_NEW_RETURN (retval,
                  ::SenderComponentImpl::SenderComponent (),
                  ::Components::EnterpriseComponent::_nil ());

  return retval;
}
