.: Document: iCCM :.
.: Last Modified: November 29, 2011 :.

Table of Contents
===========================================================
I. Overview of iCCM
II. Starting an iCCM Project
III. Using DDS with iCCM

I. Overview of iCCM
---------------------------------------
iCCM, which is short for integrated CCM (iCCM), is a framework for
integrating third-party distributed middleware into CCM. Unlike existing
approaches that rely on direct integration at the implementation level,
or integration via CCM connectors, iCCM integrates third-party
distributed middleware at the servant-level. This is possible because
CCM servants serve as mediators between the outside world and the
component's implementation. iCCM therefore leverages this capability
and allows such interaction with the outside world be with any distributed
middleware technology---not just CORBA or CCM. The only challenge is
mapping third-party distributed middleware events to CCM events.

II. Starting an iCCM Project
---------------------------------------
Starting an iCCM project is very simple. We have provided a Python3
script that will generate all the skeleton code needed to build an
iCCM project that integrated with both CCM and the Deployment And
Configuration Engine (DAnCE), which is a tool and framework for
deploying CCM applications.

Just execute the following command:

  %> $CUTS_ROOT/bin/generate_iccm_project.py -n NAME -o GENDIR

where NAME is the name of your project and GENDIR is the directory
for the generated files. The NAME parameter cannot contain any spaces.

III. Using DDS with iCCM
---------------------------------------
We have integrated DDS into the iCCM architecture. There, however, are
additional steps required to use DDS with iCCM unlike the other integrated
architectures. This is because DDS uses 'structs' to represent data and
CCM use 'events' to represent data. This means we have need (1) equivalent
CCM events for each DDS struct and (2) wrappers that will convert DDS
data types to CCM events and visa versa at runtime. Fortunately, we are
able to use both the modeling tools and iCCM compiler to address this
problem.

To enable DDS support with iCCM, just execute the following steps:

1. Model the DDS events using PICML.
2. Execute the dds2ccm interpreter in PICML (Tools | Run Interpreter... | dds2ccm Interpreter)
3. Use auto-generated events in the model as normally.

Right now, all DDS events are append with *Event* to signify its
mapping between DDS and CCM. Making changes to the auto-generated
event can result in incorrect code generation. In the future, we
will allow you to customize what is appended to a DDS event when
auto-generating CCM events.
