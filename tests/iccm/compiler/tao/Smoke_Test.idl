#ifndef _SMOKE_TEST_IDL_
#define _SMOKE_TEST_IDL_

#include <Components.idl>

#pragma ciao lem "Smoke_TestE.idl"

enum SmokeEnumType
{
  SmokeEnum1,
  SmokeEnum2
};

struct SmokeStructType
{
  boolean             SmokeBoolean;
  char                SmokeChar;
  wchar               SmokeWChar;
  octet               SmokeOctet;
  string              SmokeString;
  wstring             SmokeWString;
  short               SmokeShort;
  unsigned short      SmokeUShort;
  long                SmokeLong;
  unsigned long       SmokeULong;
  long long           SmokeLongLong;
  unsigned long long  SmokeULongLong;
  float               SmokeFloat;
  double              SmokeDouble;
  ::SmokeEnumType     SmokeEnum;
};

eventtype SmokeEvent
{
  public boolean              SmokeBoolean;
  public char                 SmokeChar;
  public wchar                SmokeWChar;
  public octet                SmokeOctet;
  public string               SmokeString;
  public wstring              SmokeWString;
  public short                SmokeShort;
  public unsigned short       SmokeUShort;
  public long                 SmokeLong;
  public unsigned long        SmokeULong;
  public long long            SmokeLongLong;
  public unsigned long long   SmokeULongLong;
  public float                SmokeFloat;
  public double               SmokeDouble;
  public ::SmokeEnumType      SmokeEnum;
  public ::SmokeStructType    SmokeStruct;
};

interface SmokeInterface
{
  void                SmokeVoid ();
  boolean             SmokeBoolean (in boolean arg_in, out boolean arg_out);
  char                SmokeChar (in char arg_in, out char arg_out);
  wchar               SmokeWChar (in wchar arg_in, out wchar arg_out);
  octet               SmokeOctet (in octet arg_in, out octet arg_out);
  string              SmokeString (in string arg_in, out string arg_out);
  wstring             SmokeWString (in wstring arg_in, out wstring arg_out);
  short               SmokeShort (in short arg_in, out short arg_out);
  unsigned short      SmokeUShort (in unsigned short arg_in, out unsigned short arg_out);
  long                SmokeLong (in long arg_in, out long arg_out);
  unsigned long       SmokeULong (in unsigned long arg_in, out unsigned long arg_out);
  long long           SmokeLongLong (in long long arg_in, out long long arg_out);
  unsigned long long  SmokeULongLong (in unsigned long long arg_in, out unsigned long long arg_out);
  float               SmokeFloat (in float arg_in, out float arg_out);
  double              SmokeDouble (in double arg_in, out double arg_out);
  ::SmokeEnumType     SmokeEnum (in ::SmokeEnumType arg_in, out ::SmokeEnumType arg_out);
  ::SmokeStructType   SmokeStruct (in ::SmokeStructType arg_in, out ::SmokeStructType arg_out);
};

component SmokeComponent
{
  consumes  ::SmokeEvent SmokeConsume;
  publishes ::SmokeEvent SmokeEmit;
  publishes ::SmokeEvent SmokePublish;
  provides  ::SmokeInterface SmokeProvide;
  uses      ::SmokeInterface SmokeUse;

  // Attributes
  attribute boolean              AttributeBoolean;
  attribute char                 AttributeChar;
  attribute wchar                AttributeWChar;
  attribute octet                AttributeOctet;
  attribute string               AttributeString;
  attribute wstring              AttributeWString;
  attribute short                AttributeShort;
  attribute unsigned short       AttributeUShort;
  attribute long                 AttributeLong;
  attribute unsigned long        AttributeULong;
  attribute long long            AttributeLongLong;
  attribute unsigned long long   AttributeULongLong;
  attribute float                AttributeFloat;
  attribute double               AttributeDouble;
};

#endif    // !defined _BUTTON_IDL_
