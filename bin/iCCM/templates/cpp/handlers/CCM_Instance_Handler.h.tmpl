// -*- C++ -*-

//=============================================================================
/**
 * @file          ${arch_name}_CCM_Instance_Handler.h
 *
 * $$Id$$
 *
 *  Code generated by iCCM skeleton project generator that is include
 *  in the CUTS (http://cuts.cs.iupui.edu) and developed by:
 *
 *      Software Engineering & Distributed System (SEDS) Group
 *      Indiana Univesity-Purdue University Indianapolis
 *      Indianapolis, IN 46202
 *      USA
 */
//=============================================================================

#ifndef _${arch_name.upper()}_CCM_INSTANCE_HANDLER_H_
#define _${arch_name.upper()}_CCM_INSTANCE_HANDLER_H_

#include "cuts/arch/ccm/CCM_Component_Instance_Handler_T.h"

#include "${arch_name}_CCM_Container.h"
#include "${arch_name}_CCM_Deployment_Handlers_export.h"

/**
 * @class ${arch_name}_CCM_Instance_Handler
 *
 * ${arch_name} implementation of the deployment handlers for
 * component instances.
 */
class ${arch_name}_CCM_Instance_Handler :
  public CUTS_CCM_Component_Instance_Handler_T <${arch_name}_CCM_Instance_Handler,
                                                ${arch_name}_CCM_Container>
{
public:
  /// Type definition of the base type.
  typedef CUTS_CCM_Component_Instance_Handler_T <${arch_name}_CCM_Instance_Handler,
                                                 ${arch_name}_CCM_Container>
                                                 base_type;
  /// Default constructor.
  ${arch_name}_CCM_Instance_Handler (void);

  /// Destructor.
  virtual ~${arch_name}_CCM_Instance_Handler (void);

  /**
   * Configure the instance handler. The deployment properties passed
   * into this function are the ones attached to the Node in the
   * deployment model.
   *
   * @param[in]           config          Configuration properties
   */
  virtual void configure (const Deployment::Properties & config);

  /// Close the instance handler.
  virtual void close (void);

private:
  /// INSERT YOUR VARIABLES HERE
};

extern "C"
::DAnCE::InstanceDeploymentHandler_ptr
${arch_name.upper()}_CCM_DEPLOYMENT_HANDLERS_Export
create_${arch_name}_CCM_Component_Instance_Handler (void);

#if defined (__CUTS_INLINE__)
#include "${arch_name}_CCM_Instance_Handler.inl"
#endif

#endif  // !defined _${arch_name}_CCM_INSTANCE_HANDLER_H_
