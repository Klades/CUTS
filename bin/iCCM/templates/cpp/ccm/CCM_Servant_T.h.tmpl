// -*- C++ -*-

#ifndef _${arch_name}_CCM_SERVANT_T_H_
#define _${arch_name}_CCM_SERVANT_T_H_

#include "cuts/arch/ccm/CCM_Servant_T.h"
#include "${arch_name}_CCM_Servant.h"

/**
 * @class ${arch_name}_CCM_Servant_T
 */
template <typename T, typename CONTEXT, typename EXECUTOR, typename POA_EXEC>
class ${arch_name}_CCM_Servant_T :
  public CUTS_CCM_Servant_T <T, CONTEXT, EXECUTOR, POA_EXEC, ${arch_name}_CCM_Servant>
{
public:
  /// Type definition of the base type.
  typedef CUTS_CCM_Servant_T <T,
                              CONTEXT,
			                        EXECUTOR,
			                        POA_EXEC,
			                        ${arch_name}_CCM_Servant>
                              base_type;

  ${arch_name}_CCM_Servant_T (const char * name,
		                          typename EXECUTOR::_ptr_type executor);

  /// Destructor.
  virtual ~${arch_name}_CCM_Servant_T (void);

protected:
  typedef typename base_type::consumer_map_type consumer_map_type;

  typedef typename base_type::emits_map_type emits_map_type;

  typedef typename base_type::publishes_map_type publishes_map_type;
};

#if defined (__CUTS_INLINE__)
#include "${arch_name}_CCM_Servant_T.inl"
#endif

#include "${arch_name}_CCM_Servant_T.cpp"

#endif  // !defined _${arch_name}_CCM_SERVANT_T_H_
