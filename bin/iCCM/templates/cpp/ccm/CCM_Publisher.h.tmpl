// -*- C++ -*-

//=============================================================================
/**
 *  @file         ${arch_name}_CCM_Publisher.h
 *
 *  $Id${arch_name}_Publisher.h 3086 2011-01-22 05:53:51Z hillj $
 *
 *  @author       James H. Hill
 */
//=============================================================================

#ifndef _${arch_name.upper()}_PUBLISHER_H_
#define _${arch_name.upper()}_PUBLISHER_H_

#include "cuts/arch/ccm/CCM_Publisher.h"

#include "${arch_name}_EventsC.h"
#include "${arch_name}_CCM_export.h"

/**
 * @class ${arch_name}_CCM_Publisher
 *
 * The base class for all ${arch_name} publishers that are integrated into
 * the CCM architecture. In essence, this class is an adapter class that
 * allows a ${arch_name} publisher to integrate with the CCM architecture.
 */
class ${arch_name.upper()}_CCM_Export ${arch_name}_CCM_Publisher :
  public CUTS_CCM_Publisher
{
public:
  /// Default constructor.
  ${arch_name}_CCM_Publisher (void);

  /// Destructor.
  virtual ~${arch_name}_CCM_Publisher (void);

  /**
   * Connect an event consumer to this publisher. This reference should
   * be narrowed to a ::Components::${arch_name}::EventConsumer object.
   *
   * @param[in]           consumer          Referene to event consumer.
   */
  virtual void connect (::Components::EventConsumerBase_ptr consumer);

  /// Disconnect the consumer.
  virtual ::Components::EventConsumerBase_ptr disconnect (void);

  /// INSERT CODE HERE

protected:
  /// Helper method for storing a connection.
  void connect_i (::Components::EventConsumerBase_ptr consumer);

  /// The consumer connected to this publisher.
  ::Components::${arch_name}::EventConsumer_var consumer_;

  /// INSERT CODE HERE
};

#if defined (__CUTS_INLINE__)
#include "${arch_name}_CCM_Publisher.inl"
#endif

#endif
