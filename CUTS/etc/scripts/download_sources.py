#!/usr/bin/env python

###############################################################################
#
# @file        download_sources.py
#
# $Id$
#
# @author      James H. Hill
#
###############################################################################

import getopt
import os
import sys
import subprocess
from string import Template

def print_help ():
    help = """Download CUTS and third-party sources from repository

USAGE: download_sources.py [OPTIONS]

General Options:
  --prefix=PATH               Target location for download [default=.]

Print Options:
  -h, --help                  Print this help message

This script not only downloads the sources, but it will construct a
configuration file that details the location of CUTS and each
third-party project. This configuration file should be executed from
the command-line each time a new console is open. Otherwise, the
environment will not be configured properly.
"""
    print help
    sys.exit (1)

#
# Utility function for executing an SVN checkout
#
# @param[in]        url         Location of the repo
# @param[in]        location    Sandbox of the checkout
# @param[in]        username    Username for checkout, if applicable
# @param[in]        password    Password for checkout, if applicable
#
def svn_checkout (url, location, username=None, password=None):
    cmd = ["svn", "co", url, location]

    if username is not None:
        cmd.append ("--username")
        cmd.append (username)

    if password is not None:
        cmd.append ("--password")
        cmd.append (password)

    subprocess.call (cmd)

def generate_configure_bat (prefix, abspath):
    batfile = abspath + "/configure.bat"

    #Creating string template for .mwc file
    template = Template ("""@rem This file was generated by:
@rem ${command_line}

@rem ***************************************************************************
@rem ** Middleware
@rem ***************************************************************************

@set ACE_ROOT=%~dp0\\Middleware\\ACE
@set TAO_ROOT=%~dp0\\Middleware\\TAO
@set CIAO_ROOT=%~dp0\\Middleware\\CIAO
@set DANCE_ROOT=%~dp0\\Middleware\\DAnCE
@set ADBC_ROOT=%~dp0\\Middleware\\ADBC

@set PATH=%PATH%;%ACE_ROOT%\\bin;%ACE_ROOT%\\lib;%CIAO_ROOT%\\bin;%DANCE_ROOT%\\bin
@set PATH=%PATH%;%ADBC_ROOT%\\bin;%ADBC_ROOT%\\lib;%DANCE_ROOT%\\lib

@rem ***************************************************************************
@rem ** MPC
@rem ***************************************************************************

@set MPC_ROOT=%~dp0\\MPC
@set PATH=%PATH%;%MPC_ROOT%

@rem ***************************************************************************
@rem ** CUTS
@rem ***************************************************************************

@set CUTS_ROOT=%~dp0\\CUTS
@set CCF_ROOT=%CUTS_ROOT%\\contrib\\CCF
@set UTILITY_ROOT=%CUTS_ROOT%\\contrib\\utility
@set PATH=%PATH%;%CUTS_ROOT%\\bin;%CUTS_ROOT%\\lib

@rem ***************************************************************************
@rem ** XSC
@rem ***************************************************************************

@set XSC_ROOT=%~dp0\\XSC
@set PATH=%PATH%;%XSC_ROOT%\\bin;%XSC_ROOT%\\lib
""")

    params = {  'prefix' : prefix,
                'abspath' : abspath,
                'command_line' : ",".join (sys.argv).replace (",", " ")}

    # Write the configuration file.
    file = open (batfile, "w")
    file.write (template.substitute (params))
    file.close ()

def generate_configure_sh (prefix, abspath):
    template = Template ("""#!/bin/bash

# This file was generated by:
# ${command_line}

PREFIX=`dirname $0`

################################################################################
## Middleware
################################################################################

export ACE_ROOT=\$PREFIX/Middleware/ACE
export TAO_ROOT=\$PREFIX/Middleware/TAO
export CIAO_ROOT=\$PREFIX/Middleware/CIAO
export DANCE_ROOT=\$PREFIX/Middleware/DAnCE
export ADBC_ROOT=\$PREFIX/Middleware/ADBC

export PATH=$PATH:\$ACE_ROOT/bin:\$CIAO_ROOT/bin:\$DANCE_ROOT/bin:\$ADBC_ROOT/bin
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$ACE_ROOT/lib:\$DANCE_ROOT/lib:\$ADBC_ROOT/lib

################################################################################
## MPC
################################################################################

export MPC_ROOT=\$PREFIX/MPC
export PATH=\$PATH:\$MPC_ROOT

################################################################################
## CUTS
################################################################################

export CUTS_ROOT=\$PREFIX/CUTS
export CCF_ROOT=\$CUTS_ROOT/contrib/CCF
export UTILITY_ROOT=\$CUTS_ROOT/contrib/utility

export PATH=$PATH:\$CUTS_ROOT/bin
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$CUTS_ROOT/lib

################################################################################
## XSC
################################################################################

export XSC_ROOT=\$PREFIX/XSC

export PATH=\$PATH:\$XSC_ROOT/bin
export LD_LIBRARY_PATH=\$   LD_LIBRARY_PATH/lib:\$XSC_ROOT/lib
""")

    params = {  'prefix': prefix,
                'abspath' : abspath,
                'command_line' : ",".join (sys.argv).replace (",", " ")}

    # Write the configuration file.
    shfile = abspath + "/configure.sh"
    file = open (shfile, "w")
    file.write (template.substitute (params))
    file.close ()

#
# Generate the configuration files for the download. The generated
# configuration file contains the enviroment variables that must
# be defined to build the sources correctly.
#
def generate_configure_files (prefix):
    abspath = os.path.abspath (prefix)
    platform = sys.platform

    if platform.startswith ('win32'):
        generate_configure_bat (prefix, abspath)
    else:
        generate_configure_sh (prefix, abspath)

#
# Main entry point for the application.
#
def main ():
    try:
        # Parse the command-line arguments.
        opts, args = getopt.getopt (sys.argv[1:],
                                    "h",
                                    ["help", "prefix=", "username=", "password="])

        prefix = "."
        username = "anonymous"
        password = "anonymous"

        for o, a in opts:
            if o == "--prefix":
                prefix = a
            elif o in ("-h", "--help"):
                print_help ()
            elif 0 == "--username":
                username = a
            elif 0 == "--password":
                password = a
            else:
                assert False, "unhandled option"

        # Download the MPC sources
        svn_checkout ("https://svn.dre.vanderbilt.edu/DOC/MPC/trunk",
                      prefix + "/MPC",
                      username,
                      password)

        # Download the DOC middleware
        svn_checkout ("https://svn.dre.vanderbilt.edu/DOC/Middleware/trunk",
                      prefix + "/Middleware",
                      username,
                      password)

        # Download the XSC framework
        svn_checkout ("svn://svn.dre.vanderbilt.edu/XSC/trunk",
                      prefix + "/XSC")

        # Download the CUTS sources
        svn_checkout ("https://svn.dre.vanderbilt.edu/DOC/CUTS/trunk/CUTS",
                      prefix + "/CUTS",
                      username,
                      password)

        # Finally, generate the configuration files
        generate_configure_files (prefix)

    except getopt.error, msg:
        print msg
        sys.exit (2)

#
# Invoke the main entry point, if applicable.
#
if __name__ == "__main__":
    sys.exit (main ())
