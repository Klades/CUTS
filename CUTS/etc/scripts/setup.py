#!/usr/bin/env python

###############################################################################
#
# @file        download_sources.py
#
# $Id$
#
# @author      James H. Hill
#
###############################################################################

import getopt
import os
import sys
import subprocess
from string import Template

def print_help ():
    usage = """Setup the environment for building SEM source code

USAGE: setup.py [OPTIONS]

General Options:
  --prefix=PATH                Target location of sandbox [default=.]

Setup Operations:
  --all                        Perform all setup operations

  --download                   Download all source files
  --generate-property-file     Generate configuration property file
  --generate-config-script     Generate platform-specific configuration script

Print Options:
  -h, --help                   Print this help message

This script not only downloads the sources, but it will construct a
configuration file that details the location of all projects in the
SEM repo, and each third-party project. This configuration file should
be executed from the command-line each time a new console is open.
Otherwise, the environment will not be configured properly.

The auto-generated property file is used by the build_sources.py script
that was included in the bundle.
"""

    print (usage)
    sys.exit (2)

#
# @class ScriptOpts
#
# Configuration options for the script.
#
class ScriptOpts :
    prefix = '.'
    download_sources = False
    generate_property_file = False
    generate_config_script = False
    username = 'anonymous'
    password = 'anonymous'

#
# Utility function for executing an SVN checkout
#
# @param[in]        url         Location of the repo
# @param[in]        location    Sandbox of the checkout
# @param[in]        username    Username for checkout, if applicable
# @param[in]        password    Password for checkout, if applicable
#
def svn_checkout (url, location, username=None, password=None):
    cmd = ["svn", "co", url, location]

    if username is not None:
        cmd.append ("--username")
        cmd.append (username)

    if password is not None:
        cmd.append ("--password")
        cmd.append (password)

    subprocess.call (cmd)

def generate_configure_bat (prefix, abspath):
    template = Template ("""@rem This file was generated by:
@rem ${command_line}

@rem ***************************************************************************
@rem ** Middleware
@rem ***************************************************************************

@set ACE_ROOT=%~dp0\\Middleware\\ACE
@set TAO_ROOT=%~dp0\\Middleware\\TAO
@set CIAO_ROOT=%~dp0\\Middleware\\CIAO
@set DANCE_ROOT=%~dp0\\Middleware\\DAnCE
@set ADBC_ROOT=%~dp0\\Middleware\\ADBC

@set PATH=%PATH%;%ACE_ROOT%\\bin;%ACE_ROOT%\\lib;%CIAO_ROOT%\\bin;%DANCE_ROOT%\\bin
@set PATH=%PATH%;%ADBC_ROOT%\\bin;%ADBC_ROOT%\\lib;%DANCE_ROOT%\\lib

@rem ***************************************************************************
@rem ** MPC
@rem ***************************************************************************

@set MPC_ROOT=%~dp0\\MPC
@set PATH=%PATH%;%MPC_ROOT%

@rem ***************************************************************************
@rem ** CUTS
@rem ***************************************************************************

@set CUTS_ROOT=%~dp0\\CUTS
@set CCF_ROOT=%CUTS_ROOT%\\contrib\\CCF
@set UTILITY_ROOT=%CUTS_ROOT%\\contrib\\utility
@set PATH=%PATH%;%CUTS_ROOT%\\bin;%CUTS_ROOT%\\lib

@rem ***************************************************************************
@rem ** XSC
@rem ***************************************************************************

@set XSC_ROOT=%~dp0\\XSC
@set PATH=%PATH%;%XSC_ROOT%\\bin;%XSC_ROOT%\\lib

@rem ***************************************************************************
@rem ** Xerces-C
@rem ***************************************************************************

@set XERCESCROOT=%~dp0\\xerces-c
@set PATH=%PATH%;%XERCESCROOT%\\lib

@rem ***************************************************************************
@rem ** Boost
@rem ***************************************************************************

@set BOOST_ROOT=%~dp0\\boost
@set BOOST_VERSION=boost-1_43
@set PATH=%PATH%;%BOOST_ROOT%\\lib
""")

    params = {  'prefix' : prefix,
                'abspath' : abspath,
                'command_line' : ",".join (sys.argv).replace (",", " ")}

    # Write the configuration file.
    batfile = prefix + "/configure.bat"
    file = open (batfile, "w")
    file.write (template.substitute (params))
    file.close ()

def generate_configure_sh (prefix, abspath):
    template = Template ("""#!/bin/bash

# This file was generated by:
# ${command_line}

PREFIX=`dirname $0`

################################################################################
## Middleware
################################################################################

export ACE_ROOT=\$PREFIX/Middleware/ACE
export TAO_ROOT=\$PREFIX/Middleware/TAO
export CIAO_ROOT=\$PREFIX/Middleware/CIAO
export DANCE_ROOT=\$PREFIX/Middleware/DAnCE
export ADBC_ROOT=\$PREFIX/Middleware/ADBC

export PATH=$PATH:\$ACE_ROOT/bin:\$CIAO_ROOT/bin:\$DANCE_ROOT/bin:\$ADBC_ROOT/bin
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$ACE_ROOT/lib:\$DANCE_ROOT/lib:\$ADBC_ROOT/lib

################################################################################
## MPC
################################################################################

export MPC_ROOT=\$PREFIX/MPC
export PATH=\$PATH:\$MPC_ROOT

################################################################################
## CUTS
################################################################################

export CUTS_ROOT=\$PREFIX/CUTS
export CCF_ROOT=\$CUTS_ROOT/contrib/CCF
export UTILITY_ROOT=\$CUTS_ROOT/contrib/utility

export PATH=$PATH:\$CUTS_ROOT/bin
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH:\$CUTS_ROOT/lib

################################################################################
## XSC
################################################################################

export XSC_ROOT=\$PREFIX/XSC

export PATH=\$PATH:\$XSC_ROOT/bin
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH/lib:\$XSC_ROOT/lib

################################################################################
## Xeresc-C
################################################################################

export XERCESCROOT=\$PREFIX/xerces-c
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH/lib:\$XERCESCROOT/lib

################################################################################
## Boost
################################################################################

export BOOST_ROOT=\$PREFIX/boost
export BOOST_VERSION=boost-1_43
export LD_LIBRARY_PATH=\$LD_LIBRARY_PATH/lib:\$BOOST_ROOT/lib
""")

    params = {  'prefix': prefix,
                'abspath' : abspath,
                'command_line' : ",".join (sys.argv).replace (",", " ")}

    # Write the configuration file.
    shfile = prefix + "/configure.sh"
    file = open (shfile, "w")
    file.write (template.substitute (params))
    file.close ()

#
# Generate the Java properties file for this build directory. This
# file currently assumes downloads_sources.py was used to download
# sources from their repository.
#
# @param[in]            prefix          Relative/absolute location of file
#
def generate_properties_file (prefix):
    template = Template ("""# This file was generated using the command:
# ${command_line}

# DOC Middleware
ACE_ROOT=${abspath}${slash}Middleware${slash}ACE
TAO_ROOT=${abspath}${slash}Middleware${slash}TAO
CIAO_ROOT=${abspath}${slash}Middleware${slash}CIAO
DANCE_ROOT=${abspath}${slash}Middleware${slash}DAnCE
ADBC_ROOT=${abspath}${slash}Middleware${slash}ADBC

# MPC
MPC_ROOT=${abspath}${slash}MPC

# CUTS
CUTS_ROOT=${abspath}${slash}CUTS
CCF_ROOT=${abspath}${slash}CUTS${slash}contrib${slash}CCF

# XSC
XSC_ROOT=${abspath}${slash}XSC

# Xerces-C
XERCESCROOT=${abspath}${slash}xerces-c

# Boost
BOOST_ROOT=${abspath}${slash}boost
BOOST_VERSION=boost-1_43

# PCRE
PCRE_ROOT=${abspath}${slash}pcre
""")

    slash = "/"
    abspath = os.path.abspath (prefix)

    if sys.platform.startswith ('win32'):
        slash = "\\\\"
        prefix = prefix.replace ("\\", slash)
        abspath = abspath.replace ("\\", slash)

    params = {  'prefix' : prefix,
                'abspath' : abspath,
                'slash' : slash,
                'command_line' : ",".join (sys.argv).replace (",", " ")}

    # Write the configuration file.
    propfile = prefix + "/autobuild.properties"
    propfile= open (propfile, "w")
    propfile.write (template.substitute (params))
    propfile.close ()

#
# Generate the configuration files for the download. The generated
# configuration file contains the enviroment variables that must
# be defined to build the sources correctly.
#
def generate_configure_files (prefix):
    abspath = os.path.abspath (prefix)
    platform = sys.platform

    if platform.startswith ('win32'):
        generate_configure_bat (prefix, abspath)
    else:
        generate_configure_sh (prefix, abspath)

#
# Download all the source from its respective source code repository.
# This includes CUTS and all correct version of third-party libraries
# that are need to build CUTS.
#
def download_source_files (prefix, username, password):
    # Download the MPC sources
    svn_checkout ("https://svn.dre.vanderbilt.edu/DOC/MPC/trunk",
                  prefix + "/MPC",
                  username,
                  password)

    # Download the DOC middleware
    svn_checkout ("https://svn.dre.vanderbilt.edu/DOC/Middleware/trunk",
                  prefix + "/Middleware",
                  username,
                  password)

    # Download the XSC framework
    svn_checkout ("svn://svn.dre.vanderbilt.edu/XSC/trunk",
                  prefix + "/XSC")

    # Download the CUTS source files.
    svn_checkout ("https://svn.cs.iupui.edu/repos/SEM/trunk/CUTS",
                  prefix + "/CUTS",
                  username,
                  password)

    # Download the Boost source files.
    svn_checkout ("https://svn.boost.org/svn/boost/tags/release/Boost_1_43_0",
                  prefix + "/boost")

    # Download the Xerces-C source files.
    svn_checkout ("https://svn.apache.org/repos/asf/xerces/c/tags/Xerces-C_3_1_1",
                  prefix + "/xerces-c")

#
# Main entry point for the application.
#
def main ():
    try:
        # Parse the command-line arguments.
        opts, args = getopt.getopt (sys.argv[1:],
                                    "h",
                                    ["help", "prefix=", "username=", "password=",
                                     "all", "download", "generate-config-script",
                                     "generate-property-file"])

        the_opts = ScriptOpts ()

        for o, a in opts:
            if o == "--prefix":
                the_opts.prefix = a
            elif o in ("-h", "--help"):
                print_help ()
            elif o == "--username":
                the_opts.username = a
            elif o == "--password":
                the_opts.password = a
            elif o == "--all":
                the_opts.download_sources = True
                the_opts.generate_config_script = True
                the_opts.generate_property_file = True
            elif o == "--download":
                the_opts.download_sources = True
            elif o == "--generate-config-script":
                the_opts.generate_config_script = True
            elif o == "--generate-property-file":
                the_opts.generate_property_file = True
            else:
                assert False, "unhandled option"

        if (the_opts.download_sources == False and
            the_opts.generate_property_file == False and
            the_opts.generate_config_script == False) :
            assert False, "setup operation not selected"

        # Download the source files.
        if the_opts.download_sources:
            download_source_files (the_opts.prefix,
                                   the_opts.username,
                                   the_opts.password)

        # Generate the configuration files.
        if the_opts.generate_config_script:
            generate_configure_files (the_opts.prefix)

        # Generate the autobuild properties.
        if the_opts.generate_property_file:
            generate_properties_file (the_opts.prefix)

    except getopt.error as ex:
        print ("Error: " + ex.args[0])
        sys.exit (1)

#
# Invoke the main entry point, if applicable.
#
if __name__ == "__main__":
    main ()
