/* -*- IDL -*- */

//=============================================================================
/**
 * @file      Node_Daemon.idl
 *
 * $Id$
 *
 * @author    James H. Hill
 */
//=============================================================================

#ifndef _CUTS_NODE_DAEMON_IDL_
#define _CUTS_NODE_DAEMON_IDL_

module CUTS
{
  /// Type definition of the property string list.
  typedef sequence <string> Properties;

  struct Node_Binding
  {
    boolean localhost;

    unsigned short port;
  };

  struct Node_Task
  {
    /// Human readable name of the task.
    string name;

    /// Executable name of the task.
    string execname;

    /// The arguments for the task.
    string arguments;
  };

  /**
   * @class Task_Manager
   *
   * Task manager interface for the node daemon. This allows client
   * to control the spawning/killing of child processes on the
   * hosting node.
   */
  interface Task_Manager
  {
    /**
     * Spawn a new task in the task manager. The task is spawned
     * immediately and runs infinitely or to completion.
     *
     * @param[in]       task      Target task to spawn.
     * @retval          0         Successfully to spawned task.
     * @retval          -1        Failed to spawn task.
     */
    unsigned long task_spawn (in Node_Task task);

    /**
     * Kill an existing task. If the task exist in the task manager,
     * then it will receive the SIGINT signal. Otherwise, this method
     * has no side effects.
     *
     * @param[in]     name        Name of the task.
     * @retval        0           Succussfully terminated task.
     * @retval        -1          Failed to terminate task.
     */
    unsigned long task_terminate (in string name, in boolean wait);

    /**
     * Restart an existing task. This is the equivalent of invoking
     * task_terminate () and then task_spawn () in order. If the 
     * specified task does not exist, nothing happens.
     *
     * @param[in]     name        Name of the task.
     * @retval        0           Successfully restarted task.
     * @retval        -1          Failed to restart task.
     */
    unsigned long task_restart (in string name);

    /**
     * Get information about a task.
     *
     * @info[out]     info        The task's information.
     * @retval        0           Successfully retrieve info.
     * @retval        -1          Failed to retrieve info.
     */
    unsigned long task_info (in string name,
                             out Node_Task info);

    /**
     * Shutdown the task manager.
     *
     * @param[in]     kill_tasks  Kill the owned tasks/processes. This
     *                            does not gracefully terminate the tasks.
     */
    void shutdown (in boolean kill_tasks);
  };
};

#endif  /* !defined _CUTS_NODE_DAEMON_IDL_ */
