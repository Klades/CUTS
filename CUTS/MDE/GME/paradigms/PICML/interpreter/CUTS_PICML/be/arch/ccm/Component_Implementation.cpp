// $Id$

#include "Component_Implementation.h"

#if !defined (__CUTS_INLINE__)
#include "Component_Implementation.inl"
#endif

#include "../../BE_Options.h"
#include "../../lang/cpp/Component_Impl_Generator.h"
#include "boost/bind.hpp"
#include "Uml.h"

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_File_Open_T

void CUTS_BE_File_Open_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ComponentImplementationContainer & container,
          const PICML::MonolithicImplementation & impl)
{
  // Construct the name of the file.
  std::string basename (CUTS_BE_OPTIONS ()->output_directory_);
  basename += "/" + std::string (impl.name ());

  std::string source_name = basename + ".cpp";
  std::string header_name = basename + ".h";

  // Open all the files for writing.
  this->ctx_.source_.open (source_name.c_str ());
  this->ctx_.source_formatter_.reset (new CUTS_BE_CCM::Cpp::Context::formatter_type (this->ctx_.source_));

  this->ctx_.header_.open (header_name.c_str ());
  this->ctx_.header_formatter_.reset (new CUTS_BE_CCM::Cpp::Context::formatter_type (this->ctx_.header_));
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_File_Close_T

void CUTS_BE_File_Close_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ComponentImplementationContainer & container,
          const PICML::MonolithicImplementation & impl)
{
  this->ctx_.header_formatter_.reset ();

  if (this->ctx_.header_.is_open ())
    this->ctx_.header_.close ();

  this->ctx_.source_formatter_.reset ();

  if (this->ctx_.source_.is_open ())
    this->ctx_.source_.close ();
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Include_File_T

void CUTS_BE_Include_File_T <CUTS_BE_CCM::Cpp::Context>::
generate (const std::string & include)
{
  this->ctx_.header_ << CUTS_BE_CPP::include (include);
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Prologue_T

void CUTS_BE_Prologue_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ComponentImplementationContainer & container,
          const PICML::MonolithicImplementation & impl)
{
  std::string name (impl.name ());

  // Generate the hash definition for this file.
  std::string hashdef = "_" + name + "_H_";
  std::transform (hashdef.begin (),
                  hashdef.end (),
                  hashdef.begin (),
                  &::toupper);

  this->ctx_.header_
    << "// -*- C++ -*-" << std::endl
    << std::endl
    << "#ifndef " << hashdef << std::endl
    << "#define " << hashdef << std::endl
    << std::endl
    << "#if !defined (ACE_LACKS_PRAGMA_ONCE)" << std::endl
    << "#pragma once" << std::endl
    << "#endif /* ACE_LACKS_PRAGMA_ONCE */" << std::endl
    << std::endl
    << CUTS_BE_CPP::include ("ace/pre")
    << CUTS_BE_CPP::include (std::string (container.name ()) + "EC")
    << CUTS_BE_CPP::include ("cuts/arch/ccm/CCM_Component_T")
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::single_line_comment ("This file was generated by:")
    << CUTS_BE_CPP::single_line_comment ("$Id$")
    << std::endl
    << CUTS_BE_CPP::include (name)
    /// @todo We should only include the following header if there are
    ///       are output events (or output ports) for this component.
    ///       Otherwise, we can leave this include out of this source.
    << CUTS_BE_CPP::include ("cuts/arch/ccm/CCM_Events_T")
    << std::endl;
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Epilogue_T

void CUTS_BE_Epilogue_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ComponentImplementationContainer & container,
          const PICML::MonolithicImplementation & impl)
{
  // Generate the hash definition for this file.
  std::string name (container.name ());
  std::string hashdef = "_" + name + "_H_";
  std::transform (hashdef.begin (),
                  hashdef.end (),
                  hashdef.begin (),
                  &::toupper);

  this->ctx_.header_
    << CUTS_BE_CPP::include ("ace/post")
    << std::endl
    << "#endif  // !defined " << hashdef << std::endl
    << std::endl
    << CUTS_BE_CPP::single_line_comment ("end of auto-generated file")
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::single_line_comment ("end of auto-generated file")
    << std::endl;
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Component_Impl_Begin_T

void CUTS_BE_Component_Impl_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::MonolithicImplementation & impl,
          const PICML::Component & component)
{
  // This part of the code generates the header file.
  std::string namespace_name (impl.name ());
  std::string implname (component.name ());

  std::vector <PICML::PeriodicEvent> periodics =
    component.PeriodicEvent_kind_children ();

  if (!periodics.empty ())
    this->ctx_.header_ << CUTS_BE_CPP::include ("cuts/Periodic_Event_T");

  this->ctx_.header_
    << std::endl
    << "namespace " << namespace_name
    << "{";

  //// We need to determine if any of the events sources has a
  //// CUTS::Payload_Event type. This is necessary because we will
  //// have to include a special header.
  ////
  //// @note Checking for a CUTS::Payload_Event should be done by
  ////       the preprocessor.

  typedef std::vector <PICML::OutEventPort> OutEventPort_Set;
  OutEventPort_Set outevents = component.OutEventPort_kind_children ();

  std::for_each (outevents.begin (),
                 outevents.end (),
                 boost::bind (&PICML::OutEventPort::Accept,
                              _1,
                              boost::ref (*this)));

  //for (OutEventPort_Set::iterator iter = outevents.begin ();
  //     iter != outevents.end ();
  //     iter ++)
  //{
  //  PICML::Event event = iter->ref ();
  //  std::string eventtype =
  //    this->scope (event, "::") + (std::string) event.name ();

  //  if (eventtype == "CUTS::Payload_Event")
  //  {
  //    this->out_ << include ("cuts/events_i");
  //    break;
  //  }
  //}

  std::vector <PICML::ProvidedRequestPort> facets =
    component.ProvidedRequestPort_kind_children ();

  std::for_each (facets.begin (),
                 facets.end (),
                 boost::bind (&PICML::ProvidedRequestPort::Accept,
                              _1,
                              boost::ref (*this)));

  std::string destructor = "~" + implname;

  // Construct the name of the executor.
  std::string exec =
    "CIAO" + CUTS_BE_CPP::fq_type (component, "_") +
    "_Impl::" + implname + "_Exec";

  // Construct the name of the context.
  std::string context (CUTS_BE_CPP::scope (component));
  context += "CCM_" + implname + "_Context";

  std::string basetype ("CUTS_CCM_Component_T < ");
  basetype += exec + ", " + context + " >";

  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("Type definition of the implentation base type")
    << "typedef " << basetype << " " << implname << "_Base;"
    << std::endl
    << "/**" << std::endl
    << " * @class " << implname << std::endl
    << " *" << std::endl
    << " * Implementation of the " << exec << " component executor" << std::endl
    << " */" << std::endl
    << "class " << implname << " :" << std::endl
    << "  public " << implname << "_Base {"
    << "public:" << std::endl
    << CUTS_BE_CPP::single_line_comment ("Type definition of the base component type")
    << "typedef " << implname << "_Base base_type;"
    << std::endl

    // Write the default constructor.
    << CUTS_BE_CPP::single_line_comment ("Default constructor")
    << implname << " (void);"
    << std::endl

    // Write the destructor.
    << CUTS_BE_CPP::single_line_comment ("Destructor")
    << "virtual " << destructor << " (void);"
    << std::endl;

  // This part of the code generates the source file.
  this->ctx_.source_
    << "namespace " << namespace_name
    << "{";

  // This part of the code generates the source file.
  this->ctx_.source_
    << CUTS_BE_CPP::function_header (implname)
    << implname << "::" << implname << " (void)";

  CUTS_BE_CPP::Base_Member_Init base_member_init (this->ctx_.source_);
  PICML::Component (component).Accept (base_member_init);

  this->ctx_.source_
    << "{";

  std::vector <PICML::InEventPort> events = component.InEventPort_kind_children ();
  std::for_each (events.begin (),
                 events.end (),
                 boost::bind (&PICML::InEventPort::Accept,
                              _1,
                              boost::ref (*this)));

  CUTS_BE_CPP::Initialize_Entity entity (this->ctx_.source_);
  std::for_each (periodics.begin (),
                 periodics.end (),
                 boost::bind (&PICML::PeriodicEvent::Accept,
                              _1,
                              boost::ref (entity)));

  // Finish the constructor.
  this->ctx_.source_
    << "}"
    // Write the destructor's implementation.
    << CUTS_BE_CPP::function_header (destructor)
    << implname << "::" << destructor << " (void)"
    << "{"
    << "}";
}

void CUTS_BE_Component_Impl_Begin_T <CUTS_BE_CCM::Cpp::Context>::
Visit_ProvidedRequestPort (const PICML::ProvidedRequestPort & facet)
{
  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("Forward decl.")
    << "class " << facet.name () << "_i;"
    << std::endl;
}

void CUTS_BE_Component_Impl_Begin_T <CUTS_BE_CCM::Cpp::Context>::
Visit_OutEventPort (const PICML::OutEventPort & port)
{
  this->ctx_.outevent_mgr_.insert (PICML::OutEventPort (port));
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Component_Impl_End_T

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::MonolithicImplementation & impl,
          const PICML::Component & component)
{
  // This part of the code generates the header file.
  this->ctx_.header_
    << "};"
    << "}";

  // This part of the code generates the source file.
  this->ctx_.source_
    << "}";

  this->ctx_.outevent_mgr_.clear ();
}

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
Visit_InEventPort (const PICML::InEventPort & port)
{
  PICML::Input input = port.dstInput ();
  this->sink_name_ = port.name ();

  if (Udm::null != input)
    input.Accept (*this);
}

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
Visit_PeriodicEvent (const PICML::PeriodicEvent & periodic)
{
  std::string name ("periodic_");
  name += periodic.name ();

  // Configure the periodic event.
  this->ctx_.header_
    << "this->" << name << "_.init (this, &type::" << name << ");"
    << "this->register_object (&this->" << name << "_);";
}

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
Visit_Input (const PICML::Input & input)
{
  PICML::InputAction action = input.dstInput_end ();
  action.Accept (*this);
}

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
Visit_InputAction (const PICML::InputAction & action)
{
  std::vector <PICML::Property> properties = action.Property_kind_children ();

  std::vector <PICML::Property>::const_iterator iter =
    std::find_if (properties.begin (),
                  properties.end (),
                  boost::bind (std::equal_to <std::string> (),
                               "asynchronous",
                               boost::bind (&PICML::Property::name, _1)));

  std::string varname ("push_");
  varname += this->sink_name_ + "_";

  this->ctx_.source_
    << "this->" << varname << ".init (this, "
    << "&type::push_" << this->sink_name_ << "_i);"
    << "this->register_object (&this->" << varname << ");";

  std::for_each (properties.begin (),
                 properties.end (),
                 boost::bind (&PICML::Property::Accept, _1, boost::ref (*this)));
}

void CUTS_BE_Component_Impl_End_T <CUTS_BE_CCM::Cpp::Context>::
Visit_Property (const PICML::Property & property)
{
  std::string name (property.name ());

  if (name == "threadCount")
  {
    this->ctx_.source_
      << "this->push_" << name << "_.thread_count ("
      << property.DataValue () << ");";
  }
  else if (name == "threadAffinity")
  {
    this->ctx_.source_
      << "this->push_" << name << "_.affinity_mask ("
      << property.DataValue () << ");";
  }
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Component_Impl_End_T

void CUTS_BE_Component_Impl_Entrypoint_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::MonolithicImplementation & monoimpl,
          const PICML::ComponentImplementationArtifact & artifact)
{
  std::string entrypoint (artifact.EntryPoint ());
  PICML::ImplementationArtifact ia = artifact.ref ();

  // Construct the export macro and export filename.
  std::string export_basename (ia.name ());
  std::string export_macro (export_basename);

  std::transform (export_macro.begin (),
                  export_macro.end (),
                  export_macro.begin (),
                  &toupper);

  this->ctx_.header_
    << CUTS_BE_CPP::include (export_basename + "_export")
    << std::endl
    << CUTS_BE_CPP::function_header (entrypoint)
    << "extern \"C\" " << export_macro << "_Export" << std::endl
    << "::Components::EnterpriseComponent_ptr " << entrypoint << " (void);"
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::function_header (entrypoint)
    << "::Components::EnterpriseComponent_ptr " << std::endl
    << entrypoint << " (void)"
    << "{"
    << "::Components::EnterpriseComponent_ptr retval =" << std::endl
    << "  ::Components::EnterpriseComponent::_nil ();"
    << std::endl
    << "ACE_NEW_RETURN (retval, " << std::endl
    << "::" << monoimpl.name () << "::";

  PICML::Implements implements = monoimpl.dstImplements ();

  if (Udm::null != implements)
    implements.Accept (*this);

  this->ctx_.source_
    << " ()," << std::endl
    << "::Components::EnterpriseComponent::_nil ());"
    << std::endl
    << "return retval;"
    << "}"
    << std::endl;
}

void CUTS_BE_Component_Impl_Entrypoint_T <CUTS_BE_CCM::Cpp::Context>::
Visit_Implements (const PICML::Implements & implements)
{
  PICML::ComponentRef ref = implements.dstImplements_end ();
  PICML::Component component = ref.ref ();

  if (Udm::null != component)
    component.Accept (*this);
}

void CUTS_BE_Component_Impl_Entrypoint_T <CUTS_BE_CCM::Cpp::Context>::
Visit_Component (const PICML::Component & component)
{
  this->ctx_.source_
    << component.name ();
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Environment_Method_Begin_T

void CUTS_BE_Environment_Method_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::MultiInputAction & action)
{
  std::string name (action.name ());
  PICML::Component parent = PICML::Component::Cast (action.parent ());
  std::string parent_name = parent.name ();

  if ("activate" == name)
  {
    this->ctx_.header_
      << "virtual void ccm_activate (void);"
      << std::endl;

    this->ctx_.source_
      << "void " << parent_name << "::ccm_activate (void)"
      << "{";
  }
  else if ("configuration_complete" == name)
  {
    this->ctx_.header_
      << "virtual void configuration_complete (void);"
      << std::endl;

    this->ctx_.source_
      << "void " << parent_name << "::configuration_complete (void)"
      << "{";
  }
  else if ("passivate" == name || "remove" == name)
  {
    this->ctx_.header_
      << "virtual void ccm_" << name << " (void);"
      << std::endl;

    this->ctx_.source_
      << "void " << parent_name << "::ccm_" << name << " (void)"
      << "{"
      << CUTS_BE_CPP::single_line_comment ("pass control to base class first")
      << "this->base_type::ccm_" << name << " ()";
  }
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Environment_Method_End_T

void CUTS_BE_Environment_Method_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::MultiInputAction & action)
{
  std::string name (action.name ());
  PICML::Component parent = PICML::Component::Cast (action.parent ());

  if ("activate" == name)
  {
    this->ctx_.source_
      << CUTS_BE_CPP::single_line_comment ("pass control to the base class")
      << "this->base_type::ccm_activate ();"
      << "}";
  }
  else if ("configuration_complete" == name)
  {
    this->ctx_.source_
      << CUTS_BE_CPP::single_line_comment ("pass control to the base class")
      << "this->base_type::configuration_complete ();"
      << "}";
  }
  else if ("passivate" == name || "remove" == name)
  {
    this->ctx_.header_
      << "virtual void ccm_" << name << " (void);"
      << std::endl;

    this->ctx_.source_
      << "void " << name << "::ccm_" << name << " (void)"
      << "{"
      << CUTS_BE_CPP::single_line_comment ("pass control to base class first")
      << "this->base_type::ccm_" << name << " ()";
  }
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Attribute_Begin_T

void CUTS_BE_Attribute_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::Attribute & attr)
{
  PICML::AttributeMember member = attr.AttributeMember_child ();

  if (Udm::null == member)
    return;

  PICML::MemberType member_type = member.ref ();

  if (Udm::null == member_type)
    return;

  std::string name (attr.name ());
  PICML::Component parent = PICML::Component::Cast (attr.parent ());
  std::string parent_name (parent.name ());

  // This part generates the header information.
  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("attribute setter: " + name)
    << "virtual void " << name << " (";

  CUTS_BE_CCM::Cpp::In_Type_Generator in_type_header_gen (this->ctx_.header_);
  in_type_header_gen.generate (member_type);

  this->ctx_.header_
    << " " << name << ");"
    << std::endl;

  // This part generates the source information.
  this->ctx_.source_
    << CUTS_BE_CPP::function_header ("attribute setter: " + name)
    << "void " << parent_name << "::" << name << " (";

  CUTS_BE_CCM::Cpp::In_Type_Generator in_type_source_gen (this->ctx_.source_);
  in_type_source_gen.generate (member_type);

  this->ctx_.source_
    << " " << name << ")"
    << "{";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Attribute_End_T

void CUTS_BE_Attribute_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::Attribute & attr)
{
  PICML::AttributeMember member = attr.AttributeMember_child ();
  if (Udm::null == member)
    return;

  PICML::MemberType type = member.ref ();
  if (Udm::null == type)
    return;

  Uml::Class meta = type.type ();
  std::string attr_name (attr.name ());

  this->ctx_.source_
    << "this->" << attr_name << "_ = ";

  if (meta == PICML::GenericObject::meta)
  {
    // We need to create a duplicate copy of the interface
    // before we store it.
    this->ctx_.source_
      << std::endl
      << "  ::CORBA::Object::_duplicate (" << attr_name << ");";
  }
  else if (meta == PICML::TypeEncoding::meta)
  {
    // We need to create a duplicate copy of the typecode
    // interface before we store it.
    this->ctx_.source_
      << std::endl
      << "  ::CORBA::TypeCode::_duplicate (" << attr_name << ");";
  }
  else
  {
    this->ctx_.source_ << attr_name << ";";
  }

  this->ctx_.source_
    << "}";

  // Make sure we generate the <readonly> variant.
  this->readonly_begin_.generate (attr);
  this->readonly_end_.generate (attr);
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_ReadonlyAttribute_Begin_T

void CUTS_BE_ReadonlyAttribute_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ReadonlyAttribute & attr)
{
  PICML::AttributeMember member = attr.AttributeMember_child ();
  if (member == Udm::null)
    return;

  PICML::MemberType type = member.ref ();
  if (type == Udm::null)
    return;

  std::string attr_name (attr.name ());
  PICML::Component parent = PICML::Component::Cast (attr.parent ());

  // This part of the code generate to the header file.
  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("attribute getter: " + attr_name)
    << "virtual ";

  CUTS_BE_CCM::Cpp::Retn_Type_Generator retn_header_gen (this->ctx_.header_);
  retn_header_gen.generate (type);

  this->ctx_.header_
    << " " << attr_name << " (void);"
    << std::endl;

  // This part of the code generate to the source file.
  this->ctx_.source_
    << CUTS_BE_CPP::function_header ("attribute getter: " + attr_name);

  CUTS_BE_CCM::Cpp::Retn_Type_Generator retn_source_gen (this->ctx_.source_);
  retn_source_gen.generate (type);

  this->ctx_.source_
    << " " << parent.name () << "::" << attr_name << " (void)"
    << "{";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_ReadonlyAttribute_End_T

void CUTS_BE_ReadonlyAttribute_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ReadonlyAttribute & attr)
{
  PICML::AttributeMember member = attr.AttributeMember_child ();

  if (member == Udm::null)
    return;

  PICML::MemberType type = member.ref ();

  if (type == Udm::null)
    return;

  Uml::Class meta = type.type ();
  std::string attr_name (attr.name ());

  // This section of the code write the source file.

  if (meta == PICML::String::meta)
  {
    // Strings are special case. We need to return a duplicate
    // copy of the string, or we will have major problems.
    this->ctx_.source_
      << "::CORBA::String_var s =" << std::endl
      << "  ::CORBA::string_dup (this->"
      << attr_name << "_.c_str ());"
      << "return s._retn ();";
  }
  else if (meta == PICML::GenericValue::meta)
  {
    // We need to create an <Any::_var_type> for temporary
    // storage and give control to the client using the
    // _retn () method.
    this->ctx_.source_
      << "CORBA::Any * temp = 0;"
      << "ACE_NEW_THROW_EX (temp," << std::endl
      << "::CORBA::Any (this->" << attr_name << "_)," << std::endl
      << "::CORBA::NO_MEMORY ());"
      << "return temp;";
  }
  else if (meta == PICML::GenericObject::meta)
  {
    this->ctx_.source_
      << "return ::CORBA::Object::_duplicate (this->"
      << attr_name << "_.in ());";
  }
  else if (meta == PICML::TypeEncoding::meta)
  {
    this->ctx_.source_
      << "return ::CORBA::TypeCode::_duplicate (this->"
      << attr_name << "_.in ());";
  }
  else
  {
    this->ctx_.source_
      << "return this->" << attr.name () << "_;";
  }

  this->ctx_.source_
    << "}";
}


///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_PeriodicEvent_Begin_T

void CUTS_BE_PeriodicEvent_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::PeriodicEvent & periodic)
{
  std::string name = periodic.name ();
  std::string func_name = "periodic_" + name;

  PICML::Component parent (PICML::Component::Cast (periodic.parent ()));
  std::string parent_name (parent.name ());

  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("PeriodicEvent: " + name)
    << "void " << func_name << " (void);"
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::function_header ("PeriodicEvent: " + name)
    << "void " << parent_name << "::" << func_name << " (void)"
    << "{";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_PeriodicEvent_End_T

void CUTS_BE_PeriodicEvent_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::PeriodicEvent & periodic)
{
  this->ctx_.source_
    << "}";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_InEventPort_Begin_T

void CUTS_BE_InEventPort_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::InEventPort & sink,
          const std::vector <PICML::Property> & properties)
{
  PICML::Event event = sink.ref ();

  if (event == Udm::null)
    return;

  PICML::Component parent = PICML::Component::Cast (sink.parent ());
  std::string parent_name (parent.name ());
  std::string name (sink.name ());
  std::string fq_name (CUTS_BE_CPP::fq_type (event));

  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("sink: " + name)
    << "virtual void push_" << name << " (" << fq_name << " * ev);"
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::function_header ("sink: " + name)
    << "void " << parent_name << "::push_" << name << " (" << fq_name << " * ev)"
    << "{";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_InEventPort_End_T

void CUTS_BE_InEventPort_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::InEventPort & attr,
          const std::vector <PICML::Property> & properties)
{
  this->ctx_.source_
    << "ACE_UNUSED_ARG (ev);"
    << "}";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_ProvidedRequestPort_Begin_T

void CUTS_BE_ProvidedRequestPort_Begin_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ProvidedRequestPort & facet)
{
  PICML::Object obj = PICML::Object::Cast (facet.ref ());

  if (Udm::null == obj)
    return;

  PICML::Component parent (PICML::Component::Cast (facet.parent ()));
  std::string parent_name (parent.name ());
  std::string scope (CUTS_BE_CPP::scope (obj));
  std::string name (facet.name ());
  std::string func ("get_" + name);

  this->ctx_.header_
    << CUTS_BE_CPP::single_line_comment ("facet: " + name)
    << "virtual " << scope << "CCM_" << name << "_ptr" << std::endl
    << "  " << func << " (void);"
    << std::endl;

  this->ctx_.source_
    << CUTS_BE_CPP::function_header ("facet: " + name)
    << scope << "CCM_" << name << "_ptr" << std::endl
    << "  " << parent_name << "::" << func << " (void)"
    << "{";
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_ProvidedRequestPort_End_T

void CUTS_BE_ProvidedRequestPort_End_T <CUTS_BE_CCM::Cpp::Context>::
generate (const PICML::ProvidedRequestPort & port)
{
  PICML::Object obj = PICML::Object::Cast (port.ref ());

  if (obj == Udm::null)
    return;

  std::string obj_scope (CUTS_BE_CPP::scope (obj));
  std::string name (obj.name ());

  this->ctx_.source_
    << "return " << obj_scope << "CCM_" << name << "::_nil ();"
    << "}";
}

namespace CUTS_BE_CCM
{
//
// Type_System
//
Type_System::Type_System (std::ostream & out)
: out_ (out),
  predefined_types_ (this)
{
  this->predefined_types_.insert <PICML::Boolean> ();
  this->predefined_types_.insert <PICML::Byte> ();
  this->predefined_types_.insert <PICML::GenericObject> ();
  this->predefined_types_.insert <PICML::GenericValue> ();
  this->predefined_types_.insert <PICML::LongInteger> ();
  this->predefined_types_.insert <PICML::RealNumber> ();
  this->predefined_types_.insert <PICML::ShortInteger> ();
  this->predefined_types_.insert <PICML::String> ();
  this->predefined_types_.insert <PICML::TypeEncoding> ();
  this->predefined_types_.insert <PICML::TypeKind> ();
}

//
// generate
//
void Type_System::generate (const PICML::MemberType & mt)
{
  if (Udm::IsDerivedFrom (mt.type (), PICML::PredefinedType::meta))
  {
    PICML::PredefinedType ptype = PICML::PredefinedType::Cast (mt);
    this->predefined_types_.dispatch (ptype);
  }
  else
  {
    PICML::NamedType named = PICML::NamedType::Cast (mt);
    this->out_ << CUTS_BE_CPP::fq_type (named);
  }
}

namespace Cpp
{
///////////////////////////////////////////////////////////////////////////////
// In_Type_Generator

//
// In_Type_Generator
//
In_Type_Generator::In_Type_Generator (std::ostream & out)
: Type_System (out)

{
}

//
// ~In_Type_Generator
//
In_Type_Generator::~In_Type_Generator (void)
{

}

//
// Visit_Boolean
//
void In_Type_Generator::
Visit_Boolean (const PICML::Boolean & value)
{
  this->out_ << "::CORBA::Boolean";
}

//
// Visit_Byte
//
void In_Type_Generator::
Visit_Byte (const PICML::Byte & byte)
{
  this->out_ << "::CORBA::Octet";
}

//
// Visit_LongInteger
//
void In_Type_Generator::
Visit_LongInteger (const PICML::LongInteger & value)
{
  this->out_ << "::CORBA::Long";
}

//
// Visit_ShortInteger
//
void In_Type_Generator::
Visit_ShortInteger (const PICML::ShortInteger & value)
{
  this->out_ << "::CORBA::Short";
}

//
// Visit_String
//
void In_Type_Generator::
Visit_String (const PICML::String & value)
{
  this->out_ << "const char *";
}

//
// Visit_RealNumber
//
void In_Type_Generator::
Visit_RealNumber (const PICML::RealNumber & value)
{
  this->out_ << "::CORBA::Double";
}

//
// Visit_GenericValue
//
void In_Type_Generator::
Visit_GenericValue (const PICML::GenericValue & value)
{
  this->out_ << "const ::CORBA::Any &";
}

//
// Visit_GenericObject
//
void In_Type_Generator::
Visit_GenericObject (const PICML::GenericObject & value)
{
  this->out_ << "::CORBA::Object_ptr";
}

//
// Visit_TypeKind
//
void In_Type_Generator::
Visit_TypeKind (const PICML::TypeKind & value)
{
  this->out_ << "::CORBA::TCKind";
}

//
// Visit_TypeEncoding
//
void In_Type_Generator::
Visit_TypeEncoding (const PICML::TypeEncoding & value)
{
  this->out_ << "::CORBA::TypeCode_ptr";
}

///////////////////////////////////////////////////////////////////////////////
// Out_Type_Generator

//
// Out_Type_Generator
//
Out_Type_Generator::Out_Type_Generator (std::ostream & out)
: Type_System (out)
{

}

//
// ~Out_Type_Generator
//
Out_Type_Generator::~Out_Type_Generator (void)
{

}

//
// Visit_Boolean
//
void Out_Type_Generator::
Visit_Boolean (const PICML::Boolean & value)
{
  this->out_ << "::CORBA::Boolean_out";
}

//
// Visit_Byte
//
void Out_Type_Generator::
Visit_Byte (const PICML::Byte & byte)
{
  this->out_ << "::CORBA::Octet_out";
}

//
// Visit_LongInteger
//
void Out_Type_Generator::
Visit_LongInteger (const PICML::LongInteger & value)
{
  this->out_ << "::CORBA::Long_out";
}

//
// Visit_ShortInteger
//
void Out_Type_Generator::
Visit_ShortInteger (const PICML::ShortInteger & value)
{
  this->out_ << "::CORBA::Short_out";
}

//
// Visit_String
//
void Out_Type_Generator::
Visit_String (const PICML::String & value)
{
  this->out_ << "::CORBA::String_out";
}

//
// Visit_RealNumber
//
void Out_Type_Generator::
Visit_RealNumber (const PICML::RealNumber & value)
{
  this->out_ << "::CORBA::Double_out";
}

//
// Visit_GenericValue
//
void Out_Type_Generator::
Visit_GenericValue (const PICML::GenericValue & value)
{
  this->out_ << "::CORBA::Any_out";
}

//
// Visit_GenericObject
//
void Out_Type_Generator::
Visit_GenericObject (const PICML::GenericObject & value)
{
  this->out_ << "::CORBA::Object_out";
}

//
// Visit_TypeKind
//
void Out_Type_Generator::
Visit_TypeKind (const PICML::TypeKind & value)
{
  this->out_ << "::CORBA::TCKind_out";
}

//
// Visit_TypeEncoding
//
void Out_Type_Generator::
Visit_TypeEncoding (const PICML::TypeEncoding & value)
{
  this->out_ << "::CORBA::TypeCode_out";
}

///////////////////////////////////////////////////////////////////////////////
// In_Out_Type_Generator

//
// In_Out_Type_Generator
//
In_Out_Type_Generator::In_Out_Type_Generator (std::ostream & out)
: Type_System (out)
{

}

//
// ~In_Out_Type_Generator
//
In_Out_Type_Generator::~In_Out_Type_Generator (void)
{

}

//
// Visit_Boolean
//
void In_Out_Type_Generator::
Visit_Boolean (const PICML::Boolean & value)
{
  this->out_ << "::CORBA::Boolean &";
}

//
// Visit_Byte
//
void In_Out_Type_Generator::
Visit_Byte (const PICML::Byte & byte)
{
  this->out_ << "::CORBA::Octet &";
}

//
// Visit_LongInteger
//
void In_Out_Type_Generator::
Visit_LongInteger (const PICML::LongInteger & value)
{
  this->out_ << "::CORBA::Long &";
}

//
// Visit_ShortInteger
//
void In_Out_Type_Generator::
Visit_ShortInteger (const PICML::ShortInteger & value)
{
  this->out_ << "::CORBA::Short &";
}

//
// Visit_String
//
void In_Out_Type_Generator::
Visit_String (const PICML::String & value)
{
  this->out_ << "::CORBA::String * &";
}

//
// Visit_RealNumber
//
void In_Out_Type_Generator::
Visit_RealNumber (const PICML::RealNumber & value)
{
  this->out_ << "::CORBA::Double &";
}

//
// Visit_GenericValue
//
void In_Out_Type_Generator::
Visit_GenericValue (const PICML::GenericValue & value)
{
  this->out_ << "::CORBA::Any &";
}

//
// Visit_GenericObject
//
void In_Out_Type_Generator::
Visit_GenericObject (const PICML::GenericObject & value)
{
  this->out_ << "::CORBA::Object_ptr &";
}

//
// Visit_TypeKind
//
void In_Out_Type_Generator::
Visit_TypeKind (const PICML::TypeKind & value)
{
  this->out_ << "::CORBA::TCKind &";
}

//
// Visit_TypeEncoding
//
void In_Out_Type_Generator::
Visit_TypeEncoding (const PICML::TypeEncoding & value)
{
  this->out_ << "::CORBA::TypeCode_ptr &";
}

///////////////////////////////////////////////////////////////////////////////
// Retn_Type_Generator

//
// Retn_Type_Generator
//
Retn_Type_Generator::Retn_Type_Generator (std::ostream & out)
: Type_System (out)
{

}

//
// ~Retn_Type_Generator
//
Retn_Type_Generator::~Retn_Type_Generator (void)
{

}

//
// generate
//
void Retn_Type_Generator::
generate (const PICML::MemberType & type)
{
  Type_System::generate (type);

  if (this->is_variable_type (type))
    this->out_ << " *";
}

//
// Visit_Boolean
//
void Retn_Type_Generator::
Visit_Boolean (const PICML::Boolean & value)
{
  this->out_ << "::CORBA::Boolean";
}

//
// Visit_Byte
//
void Retn_Type_Generator::
Visit_Byte (const PICML::Byte & byte)
{
  this->out_ << "::CORBA::Octet";
}

//
// Visit_LongInteger
//
void Retn_Type_Generator::
Visit_LongInteger (const PICML::LongInteger & value)
{
  this->out_ << "::CORBA::Long";
}

//
// Visit_ShortInteger
//
void Retn_Type_Generator::
Visit_ShortInteger (const PICML::ShortInteger & value)
{
  this->out_ << "::CORBA::Short";
}

//
// Visit_String
//
void Retn_Type_Generator::
Visit_String (const PICML::String & value)
{
  this->out_ << "char";
}

//
// Visit_RealNumber
//
void Retn_Type_Generator::
Visit_RealNumber (const PICML::RealNumber & value)
{
  this->out_ << "::CORBA::Double";
}

//
// Visit_GenericValue
//
void Retn_Type_Generator::
Visit_GenericValue (const PICML::GenericValue & value)
{
  this->out_ << "::CORBA::Any";
}

//
// Visit_GenericObject
//
void Retn_Type_Generator::
Visit_GenericObject (const PICML::GenericObject & value)
{
  this->out_ << "::CORBA::Object_ptr";
}

//
// Visit_TypeKind
//
void Retn_Type_Generator::
Visit_TypeKind (const PICML::TypeKind & value)
{
  this->out_ << "::CORBA::TCKind";
}

//
// Visit_TypeEncoding
//
void Retn_Type_Generator::
Visit_TypeEncoding (const PICML::TypeEncoding & value)
{
  this->out_ << "::CORBA::TypeCode_ptr";
}

//
// is_variable_type
//
bool Retn_Type_Generator::
is_variable_type (const PICML::MemberType & type)
{
  bool result;
  Uml::Class meta_type = type.type ();

  if (Udm::IsDerivedFrom (meta_type, PICML::PredefinedType::meta))
  {
    result = (meta_type == PICML::String::meta || meta_type == PICML::GenericValue::meta);
  }
  else if (meta_type == PICML::Aggregate::meta)
  {
    // Extract the aggregate from the member type.
    const PICML::Aggregate aggr = PICML::Aggregate::Cast (type);

    // Get the members of the aggregate.
    typedef std::vector <PICML::Member> Member_Set;
    Member_Set members = aggr.Member_children ();

    Member_Set::const_iterator
      iter = members.begin (),
      iter_end = members.end ();

    // Initialize the result.
    result = false;

    for (; iter != iter_end; iter ++)
    {
      // Get the next member in the data structure.
      PICML::MemberType mtype = iter->ref ();

      // Determine if it is a variable type.
      if (mtype != Udm::null)
        result |= this->is_variable_type (mtype);

      // We can quit once we have found one.
      if (result)
        break;
    }
  }
  else if (meta_type == PICML::SwitchedAggregate::meta)
  {
    const PICML::SwitchedAggregate swaggr = PICML::SwitchedAggregate::Cast (type);

    // Get the members of the aggregate.
    typedef std::vector <PICML::Member> Member_Set;
    Member_Set members = swaggr.Member_children ();

    Member_Set::const_iterator
      iter = members.begin (),
      iter_end = members.end ();

    // Initialize the result.
    result = false;

    for (; iter != iter_end; iter ++)
    {
      // Get the next member in the data structure.
      PICML::MemberType mtype = iter->ref ();

      // Determine if it is a variable type.
      if (mtype != Udm::null)
        result |= this->is_variable_type (mtype);

      // We can quit once we have found one.
      if (result)
        break;
    }
  }
  else if (meta_type == PICML::Collection::meta)
  {
    result = true;
  }
  else if (meta_type == PICML::Alias::meta)
  {
    const PICML::Alias alias = PICML::Alias::Cast (type);
    PICML::MemberType mtype = alias.ref ();

    if (mtype != Udm::null)
      result = this->is_variable_type (mtype);
  }
  else
  {
    result = false;
  }

  return result;
}


///////////////////////////////////////////////////////////////////////////////
// Attribute_Method_Generator

//
// Attribute_Method_Generator
//
Attribute_Method_Generator::Attribute_Method_Generator (std::ostream & out)
: out_ (out)
{

}

//
// ~Attribute_Method_Generator
//
Attribute_Method_Generator::~Attribute_Method_Generator (void)
{

}

//
// Visit_Attribute
//
void Attribute_Method_Generator::
Visit_Attribute (const PICML::Attribute & attr)
{
  // Write the name of the attribute method.
  std::string name = attr.name ();
  this->out_ << name << " (";

  PICML::AttributeMember member = attr.AttributeMember_child ();

  if (Udm::null != member)
    member.Accept (*this);

  this->out_ << " " << name << ")";
}

//
// Visit_AttributeMember
//
void Attribute_Method_Generator::
Visit_AttributeMember (const PICML::AttributeMember & member)
{
  PICML::MemberType mtype = member.ref ();

  if (Udm::null != mtype)
  {
    In_Type_Generator intype (this->out_);
    intype.generate (mtype);
  }
}

//
// Visit_ReadonlyAttribute
//
void Attribute_Method_Generator::
Visit_ReadonlyAttribute (const PICML::ReadonlyAttribute & ro_attr)
{
  this->out_ << ro_attr.name () << " (void)";
}

//
// InEvent_Method_Generator
//
InEvent_Method_Generator::
InEvent_Method_Generator (std::ostream & out)
: out_ (out)
{

}

//
// ~InEvent_Method_Generator
//
InEvent_Method_Generator::~InEvent_Method_Generator (void)
{

}

//
// Visit_InEventPort
//
void InEvent_Method_Generator::
Visit_InEventPort (const PICML::InEventPort & port)
{
  this->out_ << "push_" << port.name () << " (";

}

}   // namespace Cpp
}   // namespace CUTS_BE_CCM
