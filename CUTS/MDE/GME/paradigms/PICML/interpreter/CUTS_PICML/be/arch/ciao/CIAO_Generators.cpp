// $Id$

#include "CIAO_Generators.h"

#if !defined (__CUTS_INLINE__)
#include "CIAO_Generators.inl"
#endif

#include "../../BE_Options.h"
#include "../../BE_Impl_Node.h"

#include "boost/bind.hpp"

#define SVNT_SUFFIX       "_svnt"
#define STUB_SUFFIX       "_stub"
#define SKEL_SUFFIX       "_skel"

#define CLIENT_SUFFIX     "C"
#define SERVER_SUFFIX     "S"

static std::string basename (const std::string & filename)
{
  std::string::size_type npos = filename.find_last_of ("/\\");
  return filename.substr (npos + 1);
}

///////////////////////////////////////////////////////////////////////////////
// workspace generators

//
// CUTS_BE_Workspace_File_Open_T
//
void
CUTS_BE_Workspace_File_Open_T <CUTS_BE_Ciao>::
generate (const std::string & name)
{
  // Construct the full pathname of the workspace.
  std::string pathname (CUTS_BE_OPTIONS ()->output_directory_);
  pathname += "/" + name + ".mwc";

  // Open the workspace file for writing.
  this->ctx_.workspace_.open (pathname.c_str ());
}

//
// CUTS_BE_Workspace_Begin_T
//
void CUTS_BE_Workspace_Begin_T <CUTS_BE_Ciao>::
generate (const std::string & name)
{
  this->ctx_.workspace_
    << "//==================================================================="
    << std::endl
    << "// Makefile, Project, and Workspace Creator File" << std::endl
    << "//" << std::endl
    << "// This file was generated by" << std::endl
    << "// $Id$" << std::endl
    << "//" << std::endl
    << "// Please do not modify the contents of this file under" << std::endl
    << "// any circumstances. Doing so can result in failure to" << std::endl
    << "// successfully build parts of (or the entire) workspace." << std::endl
    << "//==================================================================="
    << std::endl
    << std::endl
    << "workspace (" << name << ") {" << std::endl
    << "  // -- initialize the includes for the project." << std::endl
    << "  cmdline += -include $CUTS_ROOT/MPC/config \\" << std::endl
    << "             -feature_file $CUTS_ROOT/default.features \\" << std::endl
    << "             -relative PROJECT_ROOT=" << std::endl
    << std::endl;
}

//
// CUTS_BE_Workspace_Project_Include_T <, CUTS_BE_Impl_Node>
//
void
CUTS_BE_Workspace_Project_Include_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (const CUTS_BE_Impl_Node & node)
{
  this->ctx_.workspace_
    << "  " << node.name_ << ".mpc" << std::endl;
}

//
// CUTS_BE_Workspace_Project_Include_T <, CUTS_BE_IDL_Node>
//
void
CUTS_BE_Workspace_Project_Include_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate (const CUTS_BE_IDL_Node & node)
{
  this->ctx_.workspace_
    << "  " << node.name_ << "_stub.mpc" << std::endl;
}

//
// CUTS_BE_Workspace_End_T
//
void CUTS_BE_Workspace_End_T <CUTS_BE_Ciao>::
generate (const std::string & name)
{
  this->ctx_.workspace_
    << "}" << std::endl
    << std::endl
    << CUTS_BE_CPP::single_line_comment ("end of auto-generated workspace")
    << std::endl;
}

//
// CUTS_BE_Workspace_File_Close_T
//
void CUTS_BE_Workspace_File_Close_T <CUTS_BE_Ciao>::generate (void)
{
  if (this->ctx_.workspace_.is_open ())
    this->ctx_.workspace_.close ();
}

///////////////////////////////////////////////////////////////////////////////
// project generators [CUTS_BE_Impl_Node]

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Project_File_Open_T

void CUTS_BE_Project_File_Open_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (const CUTS_BE_Impl_Node & node)
{
  std::string pathname (CUTS_BE_OPTIONS ()->output_directory_);
  pathname += "/" + node.name_ + ".mpc";

  this->ctx_.project_.open (pathname.c_str ());
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Project_File_Begin_T

void CUTS_BE_Project_File_Begin_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (const CUTS_BE_Impl_Node &)
{
  this->ctx_.project_
    << CUTS_BE_CPP::single_line_comment ("This project file was generated by")
    << CUTS_BE_CPP::single_line_comment ("$Id$")
    << std::endl;
}

//
// CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (const CUTS_BE_Impl_Node & node)
{
  // Let's reset the <visited_nodes_> object, if necessary.
  if (!this->visited_nodes_.empty ())
    this->visited_nodes_.clear ();

  // Generate the executor and servant projects.
  this->generate_skel_project (node);
  this->generate_svnt_project (node);
  this->generate_exec_project (node);
}

//
// generate_exec_project
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_exec_project (const CUTS_BE_Impl_Node & node)
{
  std::string exec_basename = node.exec_artifact_.name ();

  std::string skel_project = node.name_ + SKEL_SUFFIX;
  std::replace (skel_project.begin (), skel_project.end (), '/', '_');
  std::replace (skel_project.begin (), skel_project.end (), '\\', '_');

  // Create the export name for the project.
  std::string exec_export (exec_basename);

  std::transform (exec_export.begin (),
                  exec_export.end (),
                  exec_export.begin (),
                  &toupper);

  // Generate the executor project.
  this->ctx_.project_
    << "project (" << exec_basename
    << ") : cuts_coworker_exec {" << std::endl
    << "  sharedname   = " << exec_basename << std::endl
    << std::endl
    << "  dynamicflags = " << exec_export << "_BUILD_DLL" << std::endl
    << std::endl
    << "  prebuild = perl -- $(ACE_ROOT)/bin/generate_export_file.pl "
    << exec_export << " > $(PROJECT_ROOT)/"
    << exec_basename << "_export.h" << std::endl;

  if (!node.references_.empty ())
  {
    visited_nodes_.clear ();

    this->ctx_.project_
      << "  after += " << skel_project;

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;

    // Clear the visited nodes so we can iterate over them once
    // more. This time we are generating the libs declaration.
    visited_nodes_.clear ();

    this->ctx_.project_
      << "  libs += " << skel_project;

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;
  }

  generate_mpc_i (node);

  this->ctx_.project_
    // Generate the source files.
    << "  Source_Files {" << std::endl
    << "    " << node.name_ << "_Impl.cpp" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the header files.
    << "  Header_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << std::endl
    << "  Inline_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << std::endl
    << "  IDL_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << "}" << std::endl
    << std::endl;
}

//
// generate_svnt_project
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_svnt_project (const CUTS_BE_Impl_Node & node)
{
  // Construct the names of the servant and skeleton project.
  std::string svnt_project = node.svnt_artifact_.name ();
  std::string skel_project = node.name_ + SKEL_SUFFIX;
  std::replace (skel_project.begin (), skel_project.end (), '/', '_');
  std::replace (skel_project.begin (), skel_project.end (), '\\', '_');

  // Create the export name for the project.
  std::string svnt_export = node.svnt_artifact_.name ();
  std::transform (svnt_export.begin (),
                  svnt_export.end (),
                  svnt_export.begin (),
                  &toupper);

  this->ctx_.project_
    << "project (" << svnt_project << ") : cuts_coworker_svnt {" << std::endl
    << "  sharedname   = " << node.svnt_artifact_.location () << std::endl
    << std::endl
    << "  dynamicflags = " << svnt_export << "_BUILD_DLL" << std::endl
    << std::endl
    << "  prebuild = perl -- $(ACE_ROOT)/bin/generate_export_file.pl "
    << svnt_export << " > $(PROJECT_ROOT)/" << svnt_project << "_export.h" << std::endl
    << std::endl;

  // Generate the STUB dependencies for this node.
  if (!node.references_.empty ())
  {
    this->visited_nodes_.clear ();

    this->ctx_.project_
      << "  after += " << skel_project;

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;

    // Clear the visited nodes so we can iterate over them once
    // more. This time we are generating the libs declaration.
    this->visited_nodes_.clear ();

    this->ctx_.project_
      << "  libs += " << skel_project;

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;
  }

  this->ctx_.project_
    // Generate the CIDL files
    << "  CIDL_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the IDL files
    << "  IDL_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the source files
    << "  Source_Files {" << std::endl
    << "    " << node.basename_ << "_svnt.cpp" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the header files
    << "  Header_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << "}" << std::endl
    << std::endl;
}

//
// generate_skel_project
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_skel_project (const CUTS_BE_Impl_Node & node)
{
  // Generator the export file for the CIAO servant project.
  std::string skel_project_name = node.name_ + SKEL_SUFFIX;
  std::string skel_export_file = node.name_ + SKEL_SUFFIX + "_export.h";

  std::replace (skel_project_name.begin (), skel_project_name.end (), '/', '_');
  std::replace (skel_project_name.begin (), skel_project_name.end (), '\\', '_');

  // Create the export name for the project.
  std::string skel_export = skel_project_name;
  std::transform (skel_export.begin (),
                  skel_export.end (),
                  skel_export.begin (),
                  &toupper);

  // Generator the export file for the CIAO servant project.
  std::string svnt_export (node.svnt_artifact_.name ());
  std::string svnt_export_file = svnt_export + "_export.h";

  std::transform (svnt_export.begin (),
                  svnt_export.end (),
                  svnt_export.begin (),
                  &toupper);

  this->ctx_.project_
    << "project (" << skel_project_name
    << ") : cuts_coworker_skel {" << std::endl
    << "  sharedname   = " << skel_project_name << std::endl
    << std::endl
    << "  dynamicflags = " << skel_export << "_BUILD_DLL" << std::endl
    << std::endl
    << "  prebuild = perl -- $(ACE_ROOT)/bin/generate_export_file.pl "
    << skel_export << " > $(PROJECT_ROOT)/" << skel_export_file << std::endl
    << std::endl
    << "  cidlflags -= --" << std::endl
    << "  cidlflags += --svnt-export-macro " << svnt_export << "_Export"
    << " --svnt-export-include " << basename (svnt_export_file) << " --"
    << std::endl << std::endl
    << "  idlflags += -Wb,export_macro=" << skel_export << "_Export \\" << std::endl
    << "              -Wb,export_include=" << basename (skel_export_file)
    << std::endl
    << std::endl;

  // Generate the STUB dependencies for this node.
  if (!node.references_.empty ())
  {
    this->visited_nodes_.clear ();

    this->ctx_.project_
      << "  after +=";

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;

    // Clear the visited nodes so we can iterate over them once
    // more. This time we are generating the libs declaration.
    this->visited_nodes_.clear ();

    this->ctx_.project_
      << "  libs +=";

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl
      << std::endl;
  }

  this->ctx_.project_
    // Generate the CIDL files
    << "  CIDL_Files {" << std::endl
    << "    " << node.basename_ << ".cidl" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the IDL files
    << "  IDL_Files {" << std::endl
    << "    " << node.basename_ << "E.idl" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the source files
    << "  Source_Files {" << std::endl
    << "    " << node.basename_ << "EC.cpp" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the header files
    << "  Header_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << "}" << std::endl
    << std::endl;
}

//
// generate_stub_listing
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_stub_listing (const CUTS_BE_IDL_Node * node)
{
  IDL_Node_Set::const_iterator iter = this->visited_nodes_.find (node);

  if (iter != visited_nodes_.end ())
    return;

  visited_nodes_.insert (node);

  this->ctx_.project_
    << " \\" << std::endl
    << "    " << node->basename_ << STUB_SUFFIX;

  std::for_each (node->references_.begin (),
                  node->references_.end (),
                  boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                               this,
                               _1));
}

//
// genereate_mpc_i
//
void CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_mpc_i (const CUTS_BE_Impl_Node & node)
{
  this->generate_mpc_values ("includes", node.include_paths_);
  this->generate_mpc_values ("libpaths", node.lib_paths_);
  this->generate_mpc_values ("libs", node.lib_);
}

//
// generate_mpc_values
//
void CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate_mpc_values (const std::string & heading,
                     const CUTS_String_Set & listing)
{
  if (listing.empty ())
    return;

  this->ctx_.project_
    << "  " << heading << " +=";

  for (CUTS_String_Set::const_iterator iter = listing.begin ();
       iter != listing.end ();
       iter ++)
  {
    this->ctx_.project_
      << " \\" << std::endl
      << "    " << iter->c_str ();
  }

  this->ctx_.project_
    << std::endl
    << std::endl;
}

//
// CUTS_BE_Project_File_End_T
//
void
CUTS_BE_Project_File_End_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (const CUTS_BE_Impl_Node & node)
{
  this->ctx_.project_
    << CUTS_BE_CPP::single_line_comment("end of auto-generated project file")
    << std::endl;
}

//
// CUTS_BE_Project_File_Close_T
//
void
CUTS_BE_Project_File_Close_T <CUTS_BE_Ciao, CUTS_BE_Impl_Node>::
generate (void)
{
  if (this->ctx_.project_.is_open ())
    this->ctx_.project_.close ();
}

///////////////////////////////////////////////////////////////////////////////
// project generators [CUTS_BE_IDL_Node]

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Project_File_Open_T

void CUTS_BE_Project_File_Open_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate (const CUTS_BE_IDL_Node & node)
{
  // Construct the name of the project file.
  std::string pathname (CUTS_BE_OPTIONS ()->output_directory_);
  pathname += "/" + node.name_ + "_stub.mpc";

  // Open the project for writing.
  this->ctx_.project_.open (pathname.c_str ());
}

///////////////////////////////////////////////////////////////////////////////
// CUTS_BE_Project_File_Begin_T

void CUTS_BE_Project_File_Begin_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate (const CUTS_BE_IDL_Node &)
{
  this->ctx_.project_
    << CUTS_BE_CPP::single_line_comment ("This project file was generated by")
    << CUTS_BE_CPP::single_line_comment ("$Id$")
    << std::endl;
}

//
// CUTS_BE_Project_Write_T <C>
//
void
CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate (const CUTS_BE_IDL_Node & node)
{
  // Generate the export file for the project.
  std::string stub_name = node.basename_ + STUB_SUFFIX;

  // Construct the export name for the project.
  std::string stub_export = stub_name;
  std::transform (stub_export.begin (),
                  stub_export.end (),
                  stub_export.begin (),
                  &toupper);

  std::string stub_export_macro = stub_export + "_Export";
  std::string stub_export_file = stub_name + "_export.h";

  // Generate the project.
  this->ctx_.project_
    << "project (" << stub_name << ") : cuts_coworker_stub {" << std::endl
    << "  sharedname   = " << stub_name << std::endl
    << std::endl
    << "  dynamicflags = " << stub_export << "_BUILD_DLL" << std::endl
    << std::endl
    << "  prebuild = perl -- $(ACE_ROOT)/bin/generate_export_file.pl "
    << stub_export << " > $(PROJECT_ROOT)/" << stub_export_file << std::endl
    << std::endl
    << "  idlflags += -Wb,export_macro=" << stub_export_macro << " \\" << std::endl
    << "              -Wb,export_include=" << stub_export_file << std::endl;

  if (!node.references_.empty ())
  {
    this->visited_nodes_.clear ();

    // Generate the dependencies for this project. This will be
    // all the client projects of the references for this node.
    this->ctx_.project_
      << std::endl
      << "  after +=";

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    // Generate the import libraries for this project. This will be
    // all client project of the references for this node. The will
    // also be the same as those specified in the "after" tag.

    visited_nodes_.clear ();

    this->ctx_.project_
      << std::endl
      << std::endl
      << "  libs  +=";

    std::for_each (node.references_.begin (),
                   node.references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));

    this->ctx_.project_
      << std::endl;
  }

  this->ctx_.project_
    << std::endl
    // Generate the IDL files for this project.
    << "  IDL_Files {" << std::endl
    << "    " << node.basename_ << ".idl" << std::endl
    << "  }" << std::endl
    << std::endl

    // Generate the source files for this project.
    << "  Source_Files {" << std::endl
    << "    " << node.basename_ << SERVER_SUFFIX << ".cpp" << std::endl
    << "    " << node.basename_ << CLIENT_SUFFIX << ".cpp" << std::endl
    << "  }" << std::endl
    << std::endl
    // Generate the header files for this project.
    << "  Header_Files {" << std::endl
    << std::endl
    << "  }" << std::endl
    << "}" << std::endl
    << std::endl;
}

//
// generate_stub_listing
//
void CUTS_BE_Project_Write_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate_stub_listing (const CUTS_BE_IDL_Node * node)
{
  IDL_Node_Set::const_iterator iter = visited_nodes_.find (node);

  if (iter == visited_nodes_.end ())
  {
    this->visited_nodes_.insert (node);

    this->ctx_.project_
      << " \\" << std::endl
      << "    " << node->basename_ << STUB_SUFFIX;

    std::for_each (node->references_.begin (),
                   node->references_.end (),
                   boost::bind (&CUTS_BE_Project_Write_T::generate_stub_listing,
                                this,
                                _1));
  }
}

//
// CUTS_BE_Project_File_End_T
//
bool CUTS_BE_Project_File_End_T <CUTS_BE_Ciao, CUTS_BE_IDL_Node>::
generate (const CUTS_BE_IDL_Node & node)
{
  this->ctx_.project_
    << "// end of auto-generated project file" << std::endl;

  return true;
}

//
// CUTS_BE_Project_File_Close_T
//
void CUTS_BE_Project_File_Close_T <
CUTS_BE_Ciao, CUTS_BE_IDL_Node>::generate (void)
{
  if (this->ctx_.project_.is_open ())
    this->ctx_.project_.close ();
}
