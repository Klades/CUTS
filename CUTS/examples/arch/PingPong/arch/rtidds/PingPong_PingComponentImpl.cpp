// This file was generated by:
// $Id$

#include "PingPong_PingComponentImpl.h"
#include "cuts/arch/ccm/CCM_Events_T.h"

#include "ace/streams.h"
#include "ace/High_Res_Timer.h"
#include "ace/OS_NS_unistd.h"

#include <iomanip>

#define SEQ_PAYLOAD_SIZE 1000

namespace PingPong_PingComponentImpl
{
  //
  // PingComponent
  //
  PingComponent::PingComponent (void)
    : nof_cycles_ (100),
      topic_ ('s'),
      roundtrip_ ("round_trip"),
      write_access_ ("write_access"),
      read_access_ ("read_access")
  {
  }

  //
  // ~PingComponent
  //
  PingComponent::~PingComponent (void)
  {
  }

  //
  // sink: PP_seq_msg
  //
  void PingComponent::push_PP_seq_msg_in (::PingPong::PP_seq_msg_ev * ev)
  {
    // Update the round-trip measurements for this test.
    ACE_Time_Value roundtrip_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();
    this->roundtrip_ += (roundtrip_stop_time - this->roundtrip_start_time_);

    //std::cout << "PING: PING_seq arrived" << std::endl;
    ev->content ().count ++;

    if (ev->content ().count < (size_t)this->nof_cycles_)
    {
      // Start the round-trip measurement, while measuring write time!
      this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
      this->ctx_->push_PP_seq_msg_out (ev);
      ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

      // Update the write access.
      this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
    }
    else
      this->start_new_block ();
  }

  //
  // sink: PP_array_msg
  //
  void PingComponent::push_PP_array_msg_in (::PingPong::PP_array_msg_ev * ev)
  {
    // Update the round-trip measurements for this test.
    ACE_Time_Value roundtrip_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();
    this->roundtrip_ += (roundtrip_stop_time - this->roundtrip_start_time_);

    //std::cout << "PING: PING_array arrived" << std::endl;
    ev->content ().count ++;

    if (ev->content ().count < (size_t) this->nof_cycles_)
    {
      // Start the round-trip measurement, while measuring write time!
      this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
      this->ctx_->push_PP_array_msg_out (ev);
      ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

      // Update the write access.
      this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
    }
    else
      this->start_new_block ();
  }

  //
  // sink: PP_fixed_msg
  //
  void PingComponent::push_PP_fixed_msg_in (::PingPong::PP_fixed_msg_ev * ev)
  {
    // Update the round-trip measurements for this test.
    ACE_Time_Value roundtrip_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();
    this->roundtrip_ += (roundtrip_stop_time - this->roundtrip_start_time_);

    //std::cout << "PING: PING_fixed arrived" << std::endl;
    ev->content ().count ++;

    if (ev->content ().count < (size_t)this->nof_cycles_)
    {
      // Start the round-trip measurement, while measuring write time!
      this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
      this->ctx_->push_PP_fixed_msg_out (ev);
      ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

      // Update the write access.
      this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
    }
    else
      this->start_new_block ();
  }

  //
  // sink: PP_min_msg
  //
  void PingComponent::push_PP_min_msg_in (::PingPong::PP_min_msg_ev * ev)
  {
    // Update the round-trip measurements for this test.
    ACE_Time_Value roundtrip_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();
    this->roundtrip_ += (roundtrip_stop_time - this->roundtrip_start_time_);

    // Increment the counter for the event.
    //std::cout << "PING: PING_min arrived" << std::endl;
    ev->content ().count ++;

    if (ev->content ().count < (size_t)this->nof_cycles_)
    {
      // Start the round-trip measurement, while measuring write time!
      this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
      this->ctx_->push_PP_min_msg_out (ev);
      ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

      // Update the write access.
      this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
    }
    else
      this->start_new_block ();
  }

  //
  // sink: PP_string_msg
  //
  void PingComponent::push_PP_string_msg_in (::PingPong::PP_string_msg_ev * ev)
  {
    // Update the round-trip measurements for this test.
    ACE_Time_Value roundtrip_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();
    this->roundtrip_ += (roundtrip_stop_time - this->roundtrip_start_time_);

    //std::cout << "PING: PING_string arrived" << std::endl;
    ev->content ().count ++;

    if (ev->content ().count < (size_t)this->nof_cycles_)
    {
      // Start the round-trip measurement, while measuring write time!
      this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
      this->ctx_->push_PP_string_msg_out (ev);
      ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

      // Update the write access.
      this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
    }
    else
      this->start_new_block ();
  }

  //
  // number_of_cycles
  //
  void PingComponent::number_of_cycles (::CORBA::Long nof_cycles)
  {
    this->nof_cycles_ = nof_cycles;
  }

  //
  // number_of_cycles
  //
  ::CORBA::Long PingComponent::number_of_cycles (void)
  {
    return this->nof_cycles_;
  }

  //
  // start_new_block
  //
  void PingComponent::start_new_block (bool print_stats)
  {
    if (print_stats)
    {
      // Print the statistics.
      std::cout
        << std::setw (6) << this->block_ << " "
        << this->roundtrip_ << " "
        << this->write_access_ << " "
        << this->read_access_ << std::endl;

      // Reset the statistics.
      this->roundtrip_.reset ();
      this->write_access_.reset ();
      this->read_access_.reset ();
    }

    switch (this->topic_)
    {
    case 'm':
      {
        //std::cout << "PING: sending initial ping_min" << endl;
        CUTS_CCM_Event_T <::OBV_PingPong::PP_min_msg_ev> ev;
        ev->content ().count = 0;
        ev->content ().block = this->block_;

        this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
        this->ctx_->push_PP_min_msg_out (ev.in ());
        ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

        this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
      }
      break;

    case 'q':
      {
        //std::cout << "PING: sending initial ping_seq" << endl;
        CUTS_CCM_Event_T <::OBV_PingPong::PP_seq_msg_ev> ev;
        ev->content ().count = 0;
        ev->content ().block = this->block_;
        ev->content ().payload.length (SEQ_PAYLOAD_SIZE);

        this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
        this->ctx_->push_PP_seq_msg_out (ev.in ());
        ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

        this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
      }
      break;

    case 's':
      {
        //std::cout << "PING: sending initial ping_string" << endl;
        CUTS_CCM_Event_T <::OBV_PingPong::PP_string_msg_ev> ev;
        ev->content ().count = 0;
        ev->content ().block = this->block_;

        this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
        this->ctx_->push_PP_string_msg_out (ev.in ());
        ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

        this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
      }
      break;

    case 'f':
      {
        //std::cout << "PING: sending initial ping_fixed" << endl;
        CUTS_CCM_Event_T <::OBV_PingPong::PP_fixed_msg_ev> ev;
        ev->content ().count = 0;
        ev->content ().block = this->block_;

        this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
        this->ctx_->push_PP_fixed_msg_out (ev.in ());
        ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

        this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
      }
      break;

    case 'a':
      {
        // cout << "PING: sending initial ping_array" << endl;
        CUTS_CCM_Event_T <::OBV_PingPong::PP_array_msg_ev> ev;
        ev->content ().count = 0;
        ev->content ().block = this->block_;

        this->roundtrip_start_time_ = ACE_High_Res_Timer::gettimeofday_hr ();
        this->ctx_->push_PP_array_msg_out (ev.in ());
        ACE_Time_Value write_stop_time = ACE_High_Res_Timer::gettimeofday_hr ();

        this->write_access_ += (write_stop_time - this->roundtrip_start_time_);
      }
      break;
    }

    // Update the block information.
    ++ this->block_;
  }

  //
  // activate
  //
  void PingComponent::ccm_activate (void)
  {
    ACE_OS::sleep (3);

    ACE_Time_Value tv = ACE_High_Res_Timer::gettimeofday_hr ();

    std::cout
      << "# PING PONG measurements (in us)" << std::endl
      << "# Executed at: " << tv << std::endl
      << "#           Roundtrip time [us]             Write-access time [us]          Read-access time [us]" << std::endl
      << "# Block     Count   mean    min    max      Count   mean    min    max      Count   mean    min    max" << std::endl;

    this->block_ = 1;
    this->start_new_block (false);
  }
}

//
// create_PingPong_PingComponent_Impl
//
::Components::EnterpriseComponent_ptr
create_PingPong_PingComponent_Impl (void)
{
  ::Components::EnterpriseComponent_ptr retval =
    ::Components::EnterpriseComponent::_nil ();

  ACE_NEW_RETURN (retval,
                  ::PingPong_PingComponentImpl::PingComponent (),
                  ::Components::EnterpriseComponent::_nil ());

  return retval;
}


// end of auto-generated file

