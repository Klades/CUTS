module PingPong
{

    struct PP_min_msg
    {
        unsigned long       block;
        unsigned long       count;
    };

#pragma keylist PP_min_msg block

    typedef sequence<char>  seq_char;

    struct PP_seq_msg
    {
        unsigned long       block;
        unsigned long       count;
        seq_char            payload;
    };

#pragma keylist PP_seq_msg block

    struct PP_string_msg
    {
        unsigned long       block;
        unsigned long       count;
        string              a_string;
    };

#pragma keylist PP_string_msg block

    typedef string<40> string_40;

    struct PP_fixed_msg
    {
        unsigned long       block;
        unsigned long       count;

        char                a_char;
        octet               a_octet;
        short               a_short;
        unsigned short      a_ushort;
        long                a_long;
        unsigned long       a_ulong;
        long long           a_longlong;
        unsigned long long  a_ulonglong;
        float               a_float;
        double              a_double;
        boolean             a_boolean;
        string_40           a_bstring;
    };

#pragma keylist PP_fixed_msg block

    typedef char                str_arr_char_10[10];
    typedef octet               str_arr_octet_10[10];
    typedef short               str_arr_short_10[10];
    typedef unsigned short      str_arr_ushort_10[10];
    typedef long                str_arr_long_10[10];
    typedef unsigned long       str_arr_ulong_10[10];
    typedef long long           str_arr_longlong_10[10];
    typedef unsigned long long  str_arr_ulonglong_10[10];
    typedef float               str_arr_float_10[10];
    typedef double              str_arr_double_10[10];
    typedef boolean             str_arr_boolean_10[11];

    struct PP_array_msg
    {
      unsigned long       block;
      unsigned long       count;

      str_arr_char_10       str_arr_char;
      str_arr_octet_10      str_arr_octet;
      str_arr_short_10      str_arr_short;
      str_arr_ushort_10     str_arr_ushort;
      str_arr_long_10       str_arr_long;
      str_arr_ulong_10      str_arr_ulong;
      str_arr_longlong_10   str_arr_longlong;
      str_arr_ulonglong_10  str_arr_ulonglong;
      str_arr_float_10      str_arr_float;
      str_arr_double_10     str_arr_double;
      str_arr_boolean_10    str_arr_boolean;
    };

#pragma keylist PP_array_msg block

    typedef sequence<char, 10>               seq_char_10;
    typedef sequence<octet, 10>              seq_octets_10;
    typedef sequence<short, 10>              seq_short_10;
    typedef sequence<unsigned short, 10>     seq_ushort_10;
    typedef sequence<long, 10>               seq_long_10;
    typedef sequence<unsigned long, 10>      seq_ulong_10;
    typedef sequence<long long, 10>          seq_longlong_10;
    typedef sequence<unsigned long long, 10> seq_ulonglong_10;
    typedef sequence<float, 10>              seq_float_10;
    typedef sequence<double, 10>             seq_double_10;
    typedef sequence<boolean, 10>            seq_boolean_10;

    struct PP_bseq_msg
    {
      unsigned long     block;
      unsigned long     count;

      seq_char_10       seq_char;
      seq_octets_10     seq_octets;
      seq_short_10      seq_short;
      seq_ushort_10     seq_ushort;
      seq_long_10       seq_long;
      seq_ulong_10      seq_ulong;
      seq_longlong_10   seq_longlong;
      seq_ulonglong_10  seq_ulonglong;
      seq_float_10      seq_float;
      seq_double_10     seq_double;
      seq_boolean_10    seq_boolean;
    };

#pragma keylist PP_bseq_msg block

    struct PP_quit_msg
    {
      boolean        quit;
    };

#pragma keylist PP_quit_msg

};
