// $Id$
//
// ****              Code generated by the                        ****
// ****  Component Integrated ACE ORB (CIAO) CIDL Compiler v0.6.8 ****
// CIAO has been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// CIDL Compiler has been developed by:
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about CIAO is available at:
//    http://www.dre.vanderbilt.edu/CIAO

#include "HelloWorld_svnt.h"
#include "ciao/Valuetype_Factories/Cookies.h"
#include "ciao/Containers/CIAO_Servant_ActivatorC.h"
#include "ciao/Servants/Port_Activator_T.h"
#include "ciao/Servants/CIAO_Port_ActivatorC.h"
#include "tao/SystemException.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB_Core.h"
#include "ace/SString.h"

namespace CIDL_HelloWorld_Impl
{
  HelloWorld_Context::HelloWorld_Context (
    ::Components::CCMHome_ptr h,
    ::CIAO::Container_ptr c,
    HelloWorld_Servant *sv)
    : ::CIAO::Context_Impl_Base (h, c), 
      ::CIAO::Context_Impl<
          ::CCM_HelloWorld_Context,
          HelloWorld_Servant,
          ::HelloWorld
        > (h, c, sv)
  {
  }

  HelloWorld_Context::~HelloWorld_Context (void)
  {
  }

  /// Operations for HelloWorld receptacles and event sources,
  /// defined in ::CCM_HelloWorld_Context.

  void
  HelloWorld_Context::push_handle_message (
    ::Message *ev)
  {
    if (! ::CORBA::is_nil (this->ciao_emits_handle_message_consumer_.in ()))
    {
      this->ciao_emits_handle_message_consumer_->push_Message (ev);
    }
  }

  void
  HelloWorld_Context::connect_handle_message (
    ::MessageConsumer_ptr c)
  {
    if ( ::CORBA::is_nil (c))
    {
      throw ::CORBA::BAD_PARAM ();
    }

    if (! ::CORBA::is_nil (this->ciao_emits_handle_message_consumer_.in ()))
    {
      throw ::Components::AlreadyConnected ();
    }

    this->ciao_emits_handle_message_consumer_ = 
    ::MessageConsumer::_duplicate (c);
  }

  ::MessageConsumer_ptr
  HelloWorld_Context::disconnect_handle_message ()
  {
    if ( ::CORBA::is_nil (this->ciao_emits_handle_message_consumer_.in ()))
    {
      throw ::Components::NoConnection ();
    }

    return this->ciao_emits_handle_message_consumer_._retn ();
  }

  /// CIAO-specific.

  HelloWorld_Context *
  HelloWorld_Context::_narrow ( ::Components::SessionContext_ptr p)
  {
    return dynamic_cast<HelloWorld_Context *> (p);
  }

  HelloWorld_Servant::HelloWorld_Servant (
    ::CCM_HelloWorld_ptr exe,
    ::Components::CCMHome_ptr h,
    const char *ins_name,
    ::CIAO::Home_Servant_Impl_Base *hs,
    ::CIAO::Container_ptr c)
    : ::CIAO::Servant_Impl_Base (h, hs, c),
      ::CIAO::Servant_Impl<
          ::POA_HelloWorld,
          ::CCM_HelloWorld,
          HelloWorld_Context
        > (exe, h, hs, c),
      ins_name_ (ins_name)
  {
    ACE_NEW (this->context_,
             HelloWorld_Context (h, c, this));

    /// Set the instance id of the component on the context

    this->context_->_ciao_instance_id (this->ins_name_);

    TAO_OBV_REGISTER_FACTORY (
      ::Message_init,
      ::Message);

    TAO_OBV_REGISTER_FACTORY (
      ::Message_init,
      ::Message);

    try
    {
      ::Components::SessionComponent_var scom =
        ::Components::SessionComponent::_narrow (exe);

      if (! ::CORBA::is_nil (scom.in ()))
      {
        scom->set_session_context (this->context_);
      }

      this->populate_port_tables ();
    }

    catch (const CORBA::Exception&)
    {
    }
  }

  HelloWorld_Servant::~HelloWorld_Servant (void)
  {
  }

  void
  HelloWorld_Servant::set_attributes (
    const ::Components::ConfigValues &descr)
  {

    for ( ::CORBA::ULong i = 0; i < descr.length (); ++i)
    {
      const char *descr_name = descr[i]->name ();
      ::CORBA::Any &descr_value = descr[i]->value ();

      ACE_UNUSED_ARG (descr_name);
      ACE_UNUSED_ARG (descr_value);
    }
  }

  HelloWorld_Servant::MessageConsumer_handle_message_Servant::MessageConsumer_handle_message_Servant (
    ::CCM_HelloWorld_ptr executor,
    ::CCM_HelloWorld_Context_ptr c)
    : executor_ ( ::CCM_HelloWorld::_duplicate (executor)),
      ctx_ ( ::CCM_HelloWorld_Context::_duplicate (c))
  {
  }

  HelloWorld_Servant::MessageConsumer_handle_message_Servant::~MessageConsumer_handle_message_Servant (void)
  {
  }

  ::CORBA::Object_ptr
  HelloWorld_Servant::MessageConsumer_handle_message_Servant::_get_component ()
  {
    return this->ctx_->get_CCM_object ();
  }

  void
  HelloWorld_Servant::MessageConsumer_handle_message_Servant::push_Message (
    ::Message *evt)
  {
    this->executor_->push_handle_message (evt);
  }

  /// Inherited from ::Components::EventConsumerBase.
  void
  HelloWorld_Servant::MessageConsumer_handle_message_Servant::push_event (
    ::Components::EventBase *ev)
  {
    ::Message *ev_type =
      ::Message::_downcast (ev);

    if (ev_type != 0)
    {
      this->push_Message (ev_type);

      return;
    }

    throw ::Components::BadEventType ();
  }

  /// Inherited from ::Components::EventConsumerBase.
  void
  HelloWorld_Servant::MessageConsumer_handle_message_Servant::ciao_push_event (
    ::Components::EventBase *ev,
    const char * /* source_id */,
    ::CORBA::TypeCode_ptr /* tc */)
  {
    this->push_event (ev);
  }

  CORBA::Boolean
  HelloWorld_Servant::MessageConsumer_handle_message_Servant::ciao_is_substitutable (
    const char * event_repo_id)
  {
    if (event_repo_id == 0)
    {
      throw ::CORBA::BAD_PARAM ();
    }


    CORBA::ORB_ptr orb = TAO_ORB_Core_instance ()->orb ();

    CORBA::ValueFactory f =
      orb->lookup_value_factory (event_repo_id);

    if (f == 0)
    {
      return false;
    }

    CORBA::ValueBase_var v = f->create_for_unmarshal ();
    f->_remove_ref ();

    if (v.in () == 0)
    {
      return false;
    }

    return dynamic_cast< ::Message *> (v.in ()) != 0;
  }


  ::MessageConsumer_ptr
  HelloWorld_Servant::get_consumer_handle_message ()
  {
    if (! ::CORBA::is_nil (this->consumes_handle_message_.in ()))
    {
      return ::MessageConsumer::_duplicate (this->consumes_handle_message_.in ());
    }

    ::Components::EventConsumerBase_var obj =
      this->get_consumer_handle_message_i ();

    ::MessageConsumer_var eco =
      ::MessageConsumer::_narrow (obj.in ());

    this->consumes_handle_message_ = eco;
    return ::MessageConsumer::_duplicate (this->consumes_handle_message_.in ());
  }

  ::Components::EventConsumerBase_ptr
  HelloWorld_Servant::get_consumer_handle_message_i ()
  {
    ::Components::EventConsumerBase_ptr ret =
      this->lookup_consumer ("handle_message");

    if (! ::CORBA::is_nil (ret))
    {
      return ret;
    }

    typedef  ::CIAO::Port_Activator_T<
        HelloWorld_Servant::MessageConsumer_handle_message_Servant,
        ::CCM_HelloWorld,
        ::CCM_HelloWorld_Context,
        HelloWorld_Servant>
      MACRO_MADNESS_TYPEDEF;

    MACRO_MADNESS_TYPEDEF  *tmp = 0;

    ACE_CString obj_id (this->ins_name_);
    obj_id += "_handle_message";

    ACE_NEW_THROW_EX (tmp,
                      MACRO_MADNESS_TYPEDEF (obj_id.c_str (),
                                             "handle_message",
                                             ::CIAO::Port_Activator_Types::SINK,
                                             this->executor_.in (),
                                             this->context_,
                                             this),
                      ::CORBA::NO_MEMORY ());

    ::CIAO::Port_Activator_var pa = tmp;

    ::CIAO::Servant_Activator_var sa =
      this->container_->ports_servant_activator ();

    if (!sa->register_port_activator (tmp))
    {
      return ::MessageConsumer::_nil ();
    }

    ::CORBA::Object_var obj =
      this->container_->generate_reference (
        obj_id.c_str (),
        "IDL:MessageConsumer:1.0",
        ::CIAO::Container_Types::FACET_CONSUMER_t);

    ::Components::EventConsumerBase_var ecb =
      ::Components::EventConsumerBase::_narrow (obj.in ());

    this->add_consumer ("handle_message",
                        ecb.in ());

    return ecb._retn ();
  }

  ::Components::Cookie *
  HelloWorld_Servant::connect (const char *name,
                               ::CORBA::Object_ptr connection)
  {
    /// If the component has no receptacles, this will be unused.
    ACE_UNUSED_ARG (connection);

    if (name == 0)
    {
      throw ::Components::InvalidName ();
    }

    throw ::Components::InvalidName ();
  }

  ::CORBA::Object_ptr
  HelloWorld_Servant::disconnect (const char *name,
                                  ::Components::Cookie * ck)
  {
    ACE_UNUSED_ARG (ck);

    if (name == 0)
    {
      throw ::CORBA::BAD_PARAM ();
    }

    throw ::Components::InvalidName ();
  }

  ::Components::ReceptacleDescriptions *
  HelloWorld_Servant::get_all_receptacles ()
  {
    ::Components::ReceptacleDescriptions *retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::ReceptacleDescriptions,
                    0);
    ::Components::ReceptacleDescriptions_var safe_retval = retval;
    safe_retval->length (0UL);

    return safe_retval._retn ();
  }

  void
  HelloWorld_Servant::connect_consumer (
    const char * emitter_name,
    ::Components::EventConsumerBase_ptr consumer)
  {
    if (emitter_name == 0)
    {
      throw ::CORBA::BAD_PARAM ();
    }

    if (ACE_OS::strcmp (emitter_name, "handle_message") == 0)
    {
      ::MessageConsumer_var _ciao_consumer =
        ::MessageConsumer::_narrow (consumer);

      if ( ::CORBA::is_nil (_ciao_consumer.in ()))
      {
        throw ::Components::InvalidConnection ();
      }

      this->connect_handle_message (
        _ciao_consumer.in ()
      );

      return;
    }

    ACE_UNUSED_ARG (consumer);
    throw ::Components::InvalidName ();
  }

  ::Components::EventConsumerBase_ptr
  HelloWorld_Servant::disconnect_consumer (const char *source_name)
  {
    if (source_name == 0)
    {
      throw ::CORBA::BAD_PARAM ();
    }

    if (ACE_OS::strcmp (source_name, "handle_message") == 0)
    {
      return this->disconnect_handle_message ();
    }

    throw ::Components::InvalidName ();
  }

  ::Components::PublisherDescriptions *
  HelloWorld_Servant::get_all_publishers ()
  {
    ::Components::PublisherDescriptions *retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::PublisherDescriptions,
                    0);
    ::Components::PublisherDescriptions_var safe_retval = retval;
    safe_retval->length (0UL);

    return safe_retval._retn ();
  }

  ::Components::EmitterDescriptions *
  HelloWorld_Servant::get_all_emitters ()
  {
    ::Components::EmitterDescriptions *retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::EmitterDescriptions,
                    0);
    ::Components::EmitterDescriptions_var safe_retval = retval;
    safe_retval->length (1UL);

    ::CIAO::Servant::describe_emit_event_source<
        ::MessageConsumer_var
      > ("handle_message",
         "IDL:Message:1.0",
         this->context_->ciao_emits_handle_message_consumer_,
         safe_retval,
         0UL);

    return safe_retval._retn ();
  }

  ::Components::Cookie *
  HelloWorld_Servant::subscribe (
    const char *publisher_name,
    ::Components::EventConsumerBase_ptr subscribe)
  {
    /// Just in case there are no if blocks
    ACE_UNUSED_ARG (subscribe);

    if (publisher_name == 0)
    {
      throw ::Components::InvalidName ();
    }

    throw ::Components::InvalidName ();
  }

  ::Components::EventConsumerBase_ptr
  HelloWorld_Servant::unsubscribe (
    const char *publisher_name,
    ::Components::Cookie *ck)
  {
    /// Just in case there are no if blocks
    ACE_UNUSED_ARG (ck);

    if (publisher_name == 0)
    {
      throw ::Components::InvalidName ();
    }

    throw ::Components::InvalidName ();
  }

  void
  HelloWorld_Servant::connect_handle_message (
    ::MessageConsumer_ptr c)
  {
    this->context_->connect_handle_message (
      c
    );
  }

  ::MessageConsumer_ptr
  HelloWorld_Servant::disconnect_handle_message ()
  {
    return this->context_->disconnect_handle_message (
    );
  }

  ::CORBA::Object_ptr
  HelloWorld_Servant::get_facet_executor (
    const char *name)
  {
    if (name == 0)
    {
      throw ::CORBA::BAD_PARAM ();
    }

    return ::CORBA::Object::_nil ();
  }

  /// Supported operations.

  /// Component attribute operations.

  /// Private method to populate the port tables.
  void
  HelloWorld_Servant::populate_port_tables ()
  {
    ::CORBA::Object_var obj_var;
    ::Components::EventConsumerBase_var ecb_var;

    ecb_var =
      this->get_consumer_handle_message_i ();
  }

  extern "C" HELLOWORLD_SVNT_Export ::PortableServer::Servant
  create_HelloWorld_Servant (
    ::Components::EnterpriseComponent_ptr p,
    ::CIAO::Container_ptr c,
    const char *ins_name)
  {
    ::CCM_HelloWorld_var x =
    ::CCM_HelloWorld::_narrow (p);

    if (::CORBA::is_nil (x.in ()))
    {
      return 0;
    }

    ::PortableServer::Servant retval = 0;
    ACE_NEW_RETURN(retval, 
                   HelloWorld_Servant (x.in (),
                                       ::Components::CCMHome::_nil (),
                                       ins_name, 0, c),
                   0);

    return retval;
  }

  HelloWorldHome_Servant::HelloWorldHome_Servant (
    ::CCM_HelloWorldHome_ptr exe,
    const char *ins_name,
    ::CIAO::Container_ptr c)
    : ::CIAO::Home_Servant_Impl_Base (c),
      ::CIAO::Home_Servant_Impl<
            ::POA_HelloWorldHome,
            ::CCM_HelloWorldHome,
            HelloWorld_Servant
          > (exe, c, ins_name)
  {
  }

  HelloWorldHome_Servant::~HelloWorldHome_Servant (void)
  {
  }

  /// Home operations.

  /// Home supported interface operations.

  /// Home factory and finder operations.

  /// Home attribute operations.

  extern "C" HELLOWORLD_SVNT_Export ::PortableServer::Servant
  create_HelloWorldHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    ::CIAO::Container_ptr c,
    const char *ins_name)
  {
    ::CCM_HelloWorldHome_var x =
    ::CCM_HelloWorldHome::_narrow (p);

    if (::CORBA::is_nil (x.in ()))
    {
      return 0;
    }

    ::PortableServer::Servant retval = 0;
    ACE_NEW_RETURN(retval, 
                   HelloWorldHome_Servant (x.in (), ins_name, c), 
                   0);

    return retval;
  }
}

