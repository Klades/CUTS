// -*- C++ -*-
//
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1163

#include "SimpleComponent_svnt.h"
#include "ciao/Valuetype_Factories/Cookies.h"
#include "ciao/Containers/CIAO_Servant_ActivatorC.h"
#include "ciao/Servants/Port_Activator_T.h"
#include "ciao/Servants/CIAO_Port_ActivatorC.h"
#include "tao/SystemException.h"
#include "tao/Valuetype/ValueFactory.h"
#include "tao/ORB_Core.h"
#include "ace/SString.h"

namespace CIAO_Example_SimpleComponent_Impl
{
  SimpleComponent_Context::SimpleComponent_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Container_ptr c,
      SimpleComponent_Servant * sv)
    : ::CIAO::Context_Impl_Base (h, c),
      ::CIAO::Context_Impl<
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant,
        ::Example::SimpleComponent> (h, c, sv)
  {
  }
  
  SimpleComponent_Context::~SimpleComponent_Context (void)
  {
  }
  
  /// CIAO-specific.
  SimpleComponent_Context *
  SimpleComponent_Context::_narrow ( ::Components::SessionContext_ptr p)
  {
    return dynamic_cast<SimpleComponent_Context *> (p);
  }
  
  void
  SimpleComponent_Context::push_app_op_tcpip (
    ::Outer::TestData_DDS * ev)
  {
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_tcpip_consumer_.in ()))
      {
        this->ciao_emits_app_op_tcpip_consumer_->push_TestData_DDS (ev);
      }
  }
  
  void
  SimpleComponent_Context::connect_app_op_tcpip (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    if ( ::CORBA::is_nil (c))
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_tcpip_consumer_.in ()))
      {
        throw ::Components::AlreadyConnected ();
      }
    
    this->ciao_emits_app_op_tcpip_consumer_ =
      ::Outer::TestData_DDSConsumer::_duplicate (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Context::disconnect_app_op_tcpip (void)
  {
    if ( ::CORBA::is_nil (this->ciao_emits_app_op_tcpip_consumer_.in ()))
      {
        throw ::Components::NoConnection ();
      }
    
    return this->ciao_emits_app_op_tcpip_consumer_._retn ();
  }
  
  void
  SimpleComponent_Context::push_app_op_corba (
    ::Outer::TestData_DDS * ev)
  {
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_corba_consumer_.in ()))
      {
        this->ciao_emits_app_op_corba_consumer_->push_TestData_DDS (ev);
      }
  }
  
  void
  SimpleComponent_Context::connect_app_op_corba (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    if ( ::CORBA::is_nil (c))
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_corba_consumer_.in ()))
      {
        throw ::Components::AlreadyConnected ();
      }
    
    this->ciao_emits_app_op_corba_consumer_ =
      ::Outer::TestData_DDSConsumer::_duplicate (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Context::disconnect_app_op_corba (void)
  {
    if ( ::CORBA::is_nil (this->ciao_emits_app_op_corba_consumer_.in ()))
      {
        throw ::Components::NoConnection ();
      }
    
    return this->ciao_emits_app_op_corba_consumer_._retn ();
  }
  
  void
  SimpleComponent_Context::push_app_op_dds (
    ::Outer::TestData_DDS * ev)
  {
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_dds_consumer_.in ()))
      {
        this->ciao_emits_app_op_dds_consumer_->push_TestData_DDS (ev);
      }
  }
  
  void
  SimpleComponent_Context::connect_app_op_dds (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    if ( ::CORBA::is_nil (c))
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    if (! ::CORBA::is_nil (this->ciao_emits_app_op_dds_consumer_.in ()))
      {
        throw ::Components::AlreadyConnected ();
      }
    
    this->ciao_emits_app_op_dds_consumer_ =
      ::Outer::TestData_DDSConsumer::_duplicate (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Context::disconnect_app_op_dds (void)
  {
    if ( ::CORBA::is_nil (this->ciao_emits_app_op_dds_consumer_.in ()))
      {
        throw ::Components::NoConnection ();
      }
    
    return this->ciao_emits_app_op_dds_consumer_._retn ();
  }
  
  SimpleComponent_Servant::SimpleComponent_Servant (
      ::Example::CCM_SimpleComponent_ptr exe,
      ::Components::CCMHome_ptr h,
      const char * ins_name,
      ::CIAO::Home_Servant_Impl_Base * hs,
      ::CIAO::Container_ptr c)
    : ::CIAO::Servant_Impl_Base (h, hs, c),
      ::CIAO::Servant_Impl<
        ::POA_Example::SimpleComponent,
        ::Example::CCM_SimpleComponent,
        SimpleComponent_Context> (exe, h, hs, c),
      ins_name_ (ins_name)
  {
    ACE_NEW (this->context_,
             SimpleComponent_Context (h, c, this));
    
    /// Set the instance id of the component on the context.
    this->context_->_ciao_instance_id (this->ins_name_.c_str ());
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    TAO_OBV_REGISTER_FACTORY (
      ::Outer::TestData_DDS_init,
      ::Outer::TestData_DDS);
    
    try
      {
        ::Components::SessionComponent_var scom =
          ::Components::SessionComponent::_narrow (exe);
        
        if (! ::CORBA::is_nil (scom.in ()))
          {
            scom->set_session_context (this->context_);
          }
        
        this->populate_port_tables ();
      }
    catch (const ::CORBA::Exception &)
      {
      }
  }
  
  SimpleComponent_Servant::~SimpleComponent_Servant (void)
  {
  }
  
  void
  SimpleComponent_Servant::set_attributes (
    const ::Components::ConfigValues & descr)
  {
    for ( ::CORBA::ULong i = 0; i < descr.length (); ++i)
      {
        const char * descr_name = descr[i]->name ();
        ::CORBA::Any & descr_value = descr[i]->value ();
        
        ACE_UNUSED_ARG (descr_name);
        ACE_UNUSED_ARG (descr_value);
      }
  }
  
  /// Supported operations and all attributes.
  
  /// All port operations.
  
  /// CIAO-specific.
  ::CORBA::Object_ptr
  SimpleComponent_Servant::get_facet_executor (
    const char * name)
  {
    if (name == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    return ::CORBA::Object::_nil ();
  }
  
  ::Components::Cookie *
  SimpleComponent_Servant::subscribe (
    const char * publisher_name,
    ::Components::EventConsumerBase_ptr subscribe)
  {
    ACE_UNUSED_ARG (subscribe);
    
    if (publisher_name == 0)
      {
        throw ::Components::InvalidName ();
      }
    
    throw ::Components::InvalidName ();
  }
  
  ::Components::EventConsumerBase_ptr
  SimpleComponent_Servant::unsubscribe (
    const char * publisher_name,
    ::Components::Cookie * ck)
  {
    ACE_UNUSED_ARG (ck);
    
    if (publisher_name == 0)
      {
        throw ::Components::InvalidName ();
      }
    
    throw ::Components::InvalidName ();
  }
  
  ::Components::PublisherDescriptions *
  SimpleComponent_Servant::get_all_publishers (void)
  {
    ::Components::PublisherDescriptions *retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::PublisherDescriptions,
                    0);
    
    ::Components::PublisherDescriptions_var safe_retval = retval;
    safe_retval->length (0UL);
    
    return safe_retval._retn ();
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant (
      ::Example::CCM_SimpleComponent_ptr executor,
      ::Example::CCM_SimpleComponent_Context_ptr c)
    : executor_ ( ::Example::CCM_SimpleComponent::_duplicate (executor)),
      ctx_ ( ::Example::CCM_SimpleComponent_Context::_duplicate (c))
  {
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::~TestData_DDSConsumer_tcpip_read_test_data_Servant (void)
  {
  }
  
  ::CORBA::Object_ptr
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::_get_component (void)
  {
    return this->ctx_->get_CCM_object ();
  }
  
  void
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::push_TestData_DDS (
    ::Outer::TestData_DDS * evt)
  {
    this->executor_->push_tcpip_read_test_data (evt);
  }
  
  /// Inherited from ::Components::EventConsumerBase.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::push_event (
    ::Components::EventBase * ev)
  {
    ::Outer::TestData_DDS * ev_type =
      ::Outer::TestData_DDS::_downcast (ev);
    
    if (ev_type != 0)
      {
        this->push_TestData_DDS (ev_type);
        return;
      }
    
    throw ::Components::BadEventType ();
  }
  
  /// CIAO-specific.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::ciao_push_event (
    ::Components::EventBase * ev,
    const char * /* source_id */,
    ::CORBA::TypeCode_ptr /* tc */)
  {
    this->push_event (ev);
  }
  
  /// CIAO-specific.
  ::CORBA::Boolean
  SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant::ciao_is_substitutable (
    const char * event_repo_id)
  {
    if (event_repo_id == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    CORBA::ORB_ptr orb = TAO_ORB_Core_instance ()->orb ();
    
    CORBA::ValueFactory f =
      orb->lookup_value_factory (event_repo_id);
    
    if (f == 0)
      {
        return false;
      }
    
    CORBA::ValueBase_var v = f->create_for_unmarshal ();
    f->_remove_ref ();
    
    if (v.in () == 0)
      {
        return false;
      }
    
    return dynamic_cast< ::Outer::TestData_DDS *> (v.in ()) != 0;
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::get_consumer_tcpip_read_test_data (void)
  {
    if (! ::CORBA::is_nil (this->consumes_tcpip_read_test_data_.in ()))
      {
        return ::Outer::TestData_DDSConsumer::_duplicate (this->consumes_tcpip_read_test_data_.in ());
      }
    
    ::Components::EventConsumerBase_var obj =
      this->get_consumer_tcpip_read_test_data_i ();
    
    ::Outer::TestData_DDSConsumer_var eco =
      ::Outer::TestData_DDSConsumer::_narrow (obj.in ());
    
    this->consumes_tcpip_read_test_data_ = eco;
    return
      ::Outer::TestData_DDSConsumer::_duplicate (
        this->consumes_tcpip_read_test_data_.in ());
  }
  
  ::Components::EventConsumerBase_ptr
  SimpleComponent_Servant::get_consumer_tcpip_read_test_data_i (void)
  {
    ::Components::EventConsumerBase_ptr ret =
      this->lookup_consumer ("tcpip_read_test_data");
    
    if (! ::CORBA::is_nil (ret))
      {
        return ret;
      }
    
    typedef
      ::CIAO::Port_Activator_T<
        SimpleComponent_Servant::TestData_DDSConsumer_tcpip_read_test_data_Servant,
        ::Example::CCM_SimpleComponent,
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant>
      MACRO_MADNESS_TYPEDEF;
    
    MACRO_MADNESS_TYPEDEF * tmp = 0;
    ACE_CString obj_id (this->ins_name_);
    obj_id += "_tcpip_read_test_data";
    
    ACE_NEW_THROW_EX (
      tmp,
      MACRO_MADNESS_TYPEDEF (
        obj_id.c_str (),
        "tcpip_read_test_data",
        ::CIAO::Port_Activator_Types::SINK,
        this->executor_.in (),
        this->context_,
        this),
      ::CORBA::NO_MEMORY ());
    
    ::CIAO::Port_Activator_var pa = tmp;
    
    ::CIAO::Servant_Activator_var sa =
      this->container_->ports_servant_activator ();
    
    if (! sa->register_port_activator (tmp))
      {
        return ::Outer::TestData_DDSConsumer::_nil ();
      }
    
    ::CORBA::Object_var obj =
      this->container_->generate_reference (
        obj_id.c_str (),
        "IDL:Outer/TestData_DDSConsumer:1.0",
        ::CIAO::Container_Types::FACET_CONSUMER_t);
      
    ::Components::EventConsumerBase_var ecb =
      ::Components::EventConsumerBase::_narrow (obj.in ());
    
    this->add_consumer ("tcpip_read_test_data", ecb.in ());
    
    return ecb._retn ();
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::TestData_DDSConsumer_corba_read_test_data_Servant (
      ::Example::CCM_SimpleComponent_ptr executor,
      ::Example::CCM_SimpleComponent_Context_ptr c)
    : executor_ ( ::Example::CCM_SimpleComponent::_duplicate (executor)),
      ctx_ ( ::Example::CCM_SimpleComponent_Context::_duplicate (c))
  {
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::~TestData_DDSConsumer_corba_read_test_data_Servant (void)
  {
  }
  
  ::CORBA::Object_ptr
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::_get_component (void)
  {
    return this->ctx_->get_CCM_object ();
  }
  
  void
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::push_TestData_DDS (
    ::Outer::TestData_DDS * evt)
  {
    this->executor_->push_corba_read_test_data (evt);
  }
  
  /// Inherited from ::Components::EventConsumerBase.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::push_event (
    ::Components::EventBase * ev)
  {
    ::Outer::TestData_DDS * ev_type =
      ::Outer::TestData_DDS::_downcast (ev);
    
    if (ev_type != 0)
      {
        this->push_TestData_DDS (ev_type);
        return;
      }
    
    throw ::Components::BadEventType ();
  }
  
  /// CIAO-specific.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::ciao_push_event (
    ::Components::EventBase * ev,
    const char * /* source_id */,
    ::CORBA::TypeCode_ptr /* tc */)
  {
    this->push_event (ev);
  }
  
  /// CIAO-specific.
  ::CORBA::Boolean
  SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant::ciao_is_substitutable (
    const char * event_repo_id)
  {
    if (event_repo_id == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    CORBA::ORB_ptr orb = TAO_ORB_Core_instance ()->orb ();
    
    CORBA::ValueFactory f =
      orb->lookup_value_factory (event_repo_id);
    
    if (f == 0)
      {
        return false;
      }
    
    CORBA::ValueBase_var v = f->create_for_unmarshal ();
    f->_remove_ref ();
    
    if (v.in () == 0)
      {
        return false;
      }
    
    return dynamic_cast< ::Outer::TestData_DDS *> (v.in ()) != 0;
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::get_consumer_corba_read_test_data (void)
  {
    if (! ::CORBA::is_nil (this->consumes_corba_read_test_data_.in ()))
      {
        return ::Outer::TestData_DDSConsumer::_duplicate (this->consumes_corba_read_test_data_.in ());
      }
    
    ::Components::EventConsumerBase_var obj =
      this->get_consumer_corba_read_test_data_i ();
    
    ::Outer::TestData_DDSConsumer_var eco =
      ::Outer::TestData_DDSConsumer::_narrow (obj.in ());
    
    this->consumes_corba_read_test_data_ = eco;
    return
      ::Outer::TestData_DDSConsumer::_duplicate (
        this->consumes_corba_read_test_data_.in ());
  }
  
  ::Components::EventConsumerBase_ptr
  SimpleComponent_Servant::get_consumer_corba_read_test_data_i (void)
  {
    ::Components::EventConsumerBase_ptr ret =
      this->lookup_consumer ("corba_read_test_data");
    
    if (! ::CORBA::is_nil (ret))
      {
        return ret;
      }
    
    typedef
      ::CIAO::Port_Activator_T<
        SimpleComponent_Servant::TestData_DDSConsumer_corba_read_test_data_Servant,
        ::Example::CCM_SimpleComponent,
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant>
      MACRO_MADNESS_TYPEDEF;
    
    MACRO_MADNESS_TYPEDEF * tmp = 0;
    ACE_CString obj_id (this->ins_name_);
    obj_id += "_corba_read_test_data";
    
    ACE_NEW_THROW_EX (
      tmp,
      MACRO_MADNESS_TYPEDEF (
        obj_id.c_str (),
        "corba_read_test_data",
        ::CIAO::Port_Activator_Types::SINK,
        this->executor_.in (),
        this->context_,
        this),
      ::CORBA::NO_MEMORY ());
    
    ::CIAO::Port_Activator_var pa = tmp;
    
    ::CIAO::Servant_Activator_var sa =
      this->container_->ports_servant_activator ();
    
    if (! sa->register_port_activator (tmp))
      {
        return ::Outer::TestData_DDSConsumer::_nil ();
      }
    
    ::CORBA::Object_var obj =
      this->container_->generate_reference (
        obj_id.c_str (),
        "IDL:Outer/TestData_DDSConsumer:1.0",
        ::CIAO::Container_Types::FACET_CONSUMER_t);
      
    ::Components::EventConsumerBase_var ecb =
      ::Components::EventConsumerBase::_narrow (obj.in ());
    
    this->add_consumer ("corba_read_test_data", ecb.in ());
    
    return ecb._retn ();
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::TestData_DDSConsumer_dds_read_test_data_Servant (
      ::Example::CCM_SimpleComponent_ptr executor,
      ::Example::CCM_SimpleComponent_Context_ptr c)
    : executor_ ( ::Example::CCM_SimpleComponent::_duplicate (executor)),
      ctx_ ( ::Example::CCM_SimpleComponent_Context::_duplicate (c))
  {
  }
  
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::~TestData_DDSConsumer_dds_read_test_data_Servant (void)
  {
  }
  
  ::CORBA::Object_ptr
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::_get_component (void)
  {
    return this->ctx_->get_CCM_object ();
  }
  
  void
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::push_TestData_DDS (
    ::Outer::TestData_DDS * evt)
  {
    this->executor_->push_dds_read_test_data (evt);
  }
  
  /// Inherited from ::Components::EventConsumerBase.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::push_event (
    ::Components::EventBase * ev)
  {
    ::Outer::TestData_DDS * ev_type =
      ::Outer::TestData_DDS::_downcast (ev);
    
    if (ev_type != 0)
      {
        this->push_TestData_DDS (ev_type);
        return;
      }
    
    throw ::Components::BadEventType ();
  }
  
  /// CIAO-specific.
  void
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::ciao_push_event (
    ::Components::EventBase * ev,
    const char * /* source_id */,
    ::CORBA::TypeCode_ptr /* tc */)
  {
    this->push_event (ev);
  }
  
  /// CIAO-specific.
  ::CORBA::Boolean
  SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant::ciao_is_substitutable (
    const char * event_repo_id)
  {
    if (event_repo_id == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    CORBA::ORB_ptr orb = TAO_ORB_Core_instance ()->orb ();
    
    CORBA::ValueFactory f =
      orb->lookup_value_factory (event_repo_id);
    
    if (f == 0)
      {
        return false;
      }
    
    CORBA::ValueBase_var v = f->create_for_unmarshal ();
    f->_remove_ref ();
    
    if (v.in () == 0)
      {
        return false;
      }
    
    return dynamic_cast< ::Outer::TestData_DDS *> (v.in ()) != 0;
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::get_consumer_dds_read_test_data (void)
  {
    if (! ::CORBA::is_nil (this->consumes_dds_read_test_data_.in ()))
      {
        return ::Outer::TestData_DDSConsumer::_duplicate (this->consumes_dds_read_test_data_.in ());
      }
    
    ::Components::EventConsumerBase_var obj =
      this->get_consumer_dds_read_test_data_i ();
    
    ::Outer::TestData_DDSConsumer_var eco =
      ::Outer::TestData_DDSConsumer::_narrow (obj.in ());
    
    this->consumes_dds_read_test_data_ = eco;
    return
      ::Outer::TestData_DDSConsumer::_duplicate (
        this->consumes_dds_read_test_data_.in ());
  }
  
  ::Components::EventConsumerBase_ptr
  SimpleComponent_Servant::get_consumer_dds_read_test_data_i (void)
  {
    ::Components::EventConsumerBase_ptr ret =
      this->lookup_consumer ("dds_read_test_data");
    
    if (! ::CORBA::is_nil (ret))
      {
        return ret;
      }
    
    typedef
      ::CIAO::Port_Activator_T<
        SimpleComponent_Servant::TestData_DDSConsumer_dds_read_test_data_Servant,
        ::Example::CCM_SimpleComponent,
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant>
      MACRO_MADNESS_TYPEDEF;
    
    MACRO_MADNESS_TYPEDEF * tmp = 0;
    ACE_CString obj_id (this->ins_name_);
    obj_id += "_dds_read_test_data";
    
    ACE_NEW_THROW_EX (
      tmp,
      MACRO_MADNESS_TYPEDEF (
        obj_id.c_str (),
        "dds_read_test_data",
        ::CIAO::Port_Activator_Types::SINK,
        this->executor_.in (),
        this->context_,
        this),
      ::CORBA::NO_MEMORY ());
    
    ::CIAO::Port_Activator_var pa = tmp;
    
    ::CIAO::Servant_Activator_var sa =
      this->container_->ports_servant_activator ();
    
    if (! sa->register_port_activator (tmp))
      {
        return ::Outer::TestData_DDSConsumer::_nil ();
      }
    
    ::CORBA::Object_var obj =
      this->container_->generate_reference (
        obj_id.c_str (),
        "IDL:Outer/TestData_DDSConsumer:1.0",
        ::CIAO::Container_Types::FACET_CONSUMER_t);
      
    ::Components::EventConsumerBase_var ecb =
      ::Components::EventConsumerBase::_narrow (obj.in ());
    
    this->add_consumer ("dds_read_test_data", ecb.in ());
    
    return ecb._retn ();
  }
  
  ::Components::Cookie *
  SimpleComponent_Servant::connect (
    const char * name,
    ::CORBA::Object_ptr connection)
  {
    /// If the component has no receptacles, arg will be unused.
    ACE_UNUSED_ARG (connection);
    
    if (name == 0)
      {
        throw ::Components::InvalidName ();
      }
    
    throw ::Components::InvalidName ();
  }
  
  ::CORBA::Object_ptr
  SimpleComponent_Servant::disconnect (
    const char * name,
    ::Components::Cookie * ck)
  {
    ACE_UNUSED_ARG (ck);
    
    if (name == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    throw ::Components::InvalidName ();
  }
  
  ::Components::ReceptacleDescriptions *
  SimpleComponent_Servant::get_all_receptacles (void)
  {
    ::Components::ReceptacleDescriptions * retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::ReceptacleDescriptions,
                    0);
    ::Components::ReceptacleDescriptions_var safe_retval = retval;
    safe_retval->length (0UL);
    
    return safe_retval._retn ();
  }
  
  void
  SimpleComponent_Servant::connect_consumer (
    const char * emitter_name,
    ::Components::EventConsumerBase_ptr consumer)
  {
    if (emitter_name == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    if (ACE_OS::strcmp (emitter_name, "app_op_tcpip") == 0)
      {
        ::Outer::TestData_DDSConsumer_var _ciao_consumer =
          ::Outer::TestData_DDSConsumer::_narrow (consumer);
        
        if ( ::CORBA::is_nil (_ciao_consumer.in ()))
          {
            throw ::Components::InvalidConnection ();
          }
        
        this->connect_app_op_tcpip (_ciao_consumer.in ());
        
        return;
      }
    
    if (ACE_OS::strcmp (emitter_name, "app_op_corba") == 0)
      {
        ::Outer::TestData_DDSConsumer_var _ciao_consumer =
          ::Outer::TestData_DDSConsumer::_narrow (consumer);
        
        if ( ::CORBA::is_nil (_ciao_consumer.in ()))
          {
            throw ::Components::InvalidConnection ();
          }
        
        this->connect_app_op_corba (_ciao_consumer.in ());
        
        return;
      }
    
    if (ACE_OS::strcmp (emitter_name, "app_op_dds") == 0)
      {
        ::Outer::TestData_DDSConsumer_var _ciao_consumer =
          ::Outer::TestData_DDSConsumer::_narrow (consumer);
        
        if ( ::CORBA::is_nil (_ciao_consumer.in ()))
          {
            throw ::Components::InvalidConnection ();
          }
        
        this->connect_app_op_dds (_ciao_consumer.in ());
        
        return;
      }
    
    ACE_UNUSED_ARG (consumer);
    throw ::Components::InvalidName ();
  }
  
  ::Components::EventConsumerBase_ptr
  SimpleComponent_Servant::disconnect_consumer (
    const char * source_name)
  {
    if (source_name == 0)
      {
        throw ::CORBA::BAD_PARAM ();
      }
    
    if (ACE_OS::strcmp (source_name, "app_op_tcpip") == 0)
      {
        return this->disconnect_app_op_tcpip ();
      }
    
    if (ACE_OS::strcmp (source_name, "app_op_corba") == 0)
      {
        return this->disconnect_app_op_corba ();
      }
    
    if (ACE_OS::strcmp (source_name, "app_op_dds") == 0)
      {
        return this->disconnect_app_op_dds ();
      }
    
    throw ::Components::InvalidName ();
  }
  
  ::Components::EmitterDescriptions *
  SimpleComponent_Servant::get_all_emitters (void)
  {
    ::Components::EmitterDescriptions *retval = 0;
    ACE_NEW_RETURN (retval,
                    ::Components::EmitterDescriptions,
                    0);
    
    ::Components::EmitterDescriptions_var safe_retval = retval;
    safe_retval->length (3UL);
    
    ::CIAO::Servant::describe_emit_event_source<
      ::Outer::TestData_DDSConsumer_var> (
        "app_op_tcpip",
        "IDL:Outer/TestData_DDS:1.0",
        this->context_->ciao_emits_app_op_tcpip_consumer_,
        safe_retval,
        0UL);
    
    ::CIAO::Servant::describe_emit_event_source<
      ::Outer::TestData_DDSConsumer_var> (
        "app_op_corba",
        "IDL:Outer/TestData_DDS:1.0",
        this->context_->ciao_emits_app_op_corba_consumer_,
        safe_retval,
        1UL);
    
    ::CIAO::Servant::describe_emit_event_source<
      ::Outer::TestData_DDSConsumer_var> (
        "app_op_dds",
        "IDL:Outer/TestData_DDS:1.0",
        this->context_->ciao_emits_app_op_dds_consumer_,
        safe_retval,
        2UL);
    
    return safe_retval._retn ();
  }
  
  void
  SimpleComponent_Servant::connect_app_op_tcpip (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    this->context_->connect_app_op_tcpip (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::disconnect_app_op_tcpip (void)
  {
    return this->context_->disconnect_app_op_tcpip ();
  }
  
  void
  SimpleComponent_Servant::connect_app_op_corba (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    this->context_->connect_app_op_corba (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::disconnect_app_op_corba (void)
  {
    return this->context_->disconnect_app_op_corba ();
  }
  
  void
  SimpleComponent_Servant::connect_app_op_dds (
    ::Outer::TestData_DDSConsumer_ptr c)
  {
    this->context_->connect_app_op_dds (c);
  }
  
  ::Outer::TestData_DDSConsumer_ptr
  SimpleComponent_Servant::disconnect_app_op_dds (void)
  {
    return this->context_->disconnect_app_op_dds ();
  }
  
  /// Private method to trigger population of the port
  /// tables (facets and event consumers).
  void
  SimpleComponent_Servant::populate_port_tables (void)
  {
    ::CORBA::Object_var obj_var;
    ::Components::EventConsumerBase_var ecb_var;
    
    ecb_var = this->get_consumer_tcpip_read_test_data_i ();
    ecb_var = this->get_consumer_corba_read_test_data_i ();
    ecb_var = this->get_consumer_dds_read_test_data_i ();
  }
  
  extern "C" SIMPLECOMPONENT_SVNT_Export ::PortableServer::Servant
  create_Example_SimpleComponent_Servant (
    ::Components::EnterpriseComponent_ptr p,
    ::CIAO::Container_ptr c,
    const char * ins_name)
  {
    ::PortableServer::Servant retval = 0;
    ::Example::CCM_SimpleComponent_var x =
      ::Example::CCM_SimpleComponent::_narrow (p);
    
    if (! ::CORBA::is_nil (x.in ()))
      {
        ACE_NEW_NORETURN (retval,
                          SimpleComponent_Servant (
                            x.in (),
                            ::Components::CCMHome::_nil (),
                            ins_name,
                            0,
                            c));
      }
    
    return retval;
  }
}

namespace CIAO_Example_SimpleComponent_Impl
{
  SimpleComponentHome_Servant::SimpleComponentHome_Servant (
      ::Example::CCM_SimpleComponentHome_ptr exe,
      const char * ins_name,
      ::CIAO::Container_ptr c)
    : ::CIAO::Home_Servant_Impl_Base (c),
      ::CIAO::Home_Servant_Impl<
        ::POA_Example::SimpleComponentHome,
        ::Example::CCM_SimpleComponentHome,
        SimpleComponent_Servant> (exe, c, ins_name)
  {
  }
  
  SimpleComponentHome_Servant::~SimpleComponentHome_Servant (void)
  {
  }
  
  /// All home operations and attributes.
  
  /// Factory operations.
  
  /// Finder operations.
  
  extern "C" SIMPLECOMPONENT_SVNT_Export ::PortableServer::Servant
  create_Example_SimpleComponentHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    ::CIAO::Container_ptr c,
    const char * ins_name)
  {
    ::PortableServer::Servant retval = 0;
    ::Example::CCM_SimpleComponentHome_var x =
      ::Example::CCM_SimpleComponentHome::_narrow (p);
    
    if (! ::CORBA::is_nil (x.in ()))
      {
        ACE_NEW_NORETURN (retval,
                          SimpleComponentHome_Servant (
                            x.in (),
                            ins_name,
                            c));
      }
    
    return retval;
  }
}

