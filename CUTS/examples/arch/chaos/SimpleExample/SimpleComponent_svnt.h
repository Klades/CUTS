// -*- C++ -*-
//
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v1.7.2
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 *       http://doc.ece.uci.edu/
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// .\be\be_codegen.cpp:1089

#ifndef CIAO_SESSION_SIMPLECOMPONENT_SVNT_H_
#define CIAO_SESSION_SIMPLECOMPONENT_SVNT_H_

#include /**/ "ace/pre.h"

#include /**/ "SimpleComponent_svnt_export.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */

#include "ciao/Containers/Container_BaseC.h"
#include "ciao/Contexts/Context_Impl_T.h"
#include "ciao/Servants/Servant_Impl_T.h"
#include "ciao/Servants/Home_Servant_Impl_T.h"

#include "SimpleComponentEC.h"

#include "SimpleComponentS.h"

namespace CIAO_Example_SimpleComponent_Impl
{
  class SimpleComponent_Servant;
  
  class SIMPLECOMPONENT_SVNT_Export SimpleComponent_Context
    : public virtual ::CIAO::Context_Impl<
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant,
        ::Example::SimpleComponent>
  {
  public:
    // Allow the servant to access our state.
    friend class SimpleComponent_Servant;
    
    // Some useful typedefs.
    
    typedef
    ::CIAO::Context_Impl<
        ::Example::CCM_SimpleComponent_Context,
        SimpleComponent_Servant,
        ::Example::SimpleComponent>
      base_type;
    
    typedef base_type::context_type context_type;
    typedef base_type::servant_type servant_type;
    typedef base_type::component_type component_type;
    
    SimpleComponent_Context (
      ::Components::CCMHome_ptr h,
      ::CIAO::Container_ptr c,
      SimpleComponent_Servant *sv);
    
    virtual ~SimpleComponent_Context (void);
    
    // CIAO-specific.
    static SimpleComponent_Context *
    _narrow ( ::Components::SessionContext_ptr p);
    
    // Operations for SimpleComponent receptacles and event sources,
    // defined in ::Example::CCM_SimpleComponent_Context.
    
    // Receptacles.
    
    // Event publishers.
    
    // Event emitters.
  
  public:
    virtual void
    push_app_op_tcpip (
      ::Outer::TestData_DDS * ev);
  
  protected:
    virtual void
    connect_app_op_tcpip (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_tcpip (void);
  
  protected:
    ::Outer::TestData_DDSConsumer_var
    ciao_emits_app_op_tcpip_consumer_;
  
  public:
    virtual void
    push_app_op_corba (
      ::Outer::TestData_DDS * ev);
  
  protected:
    virtual void
    connect_app_op_corba (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_corba (void);
  
  protected:
    ::Outer::TestData_DDSConsumer_var
    ciao_emits_app_op_corba_consumer_;
  
  public:
    virtual void
    push_app_op_dds (
      ::Outer::TestData_DDS * ev);
  
  protected:
    virtual void
    connect_app_op_dds (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_dds (void);
  
  protected:
    ::Outer::TestData_DDSConsumer_var
    ciao_emits_app_op_dds_consumer_;
  };
  
  class SIMPLECOMPONENT_SVNT_Export SimpleComponent_Servant
    : public virtual
        ::CIAO::Servant_Impl<
          ::POA_Example::SimpleComponent,
          ::Example::CCM_SimpleComponent,
          SimpleComponent_Context>
  {
  public:
    typedef ::Example::CCM_SimpleComponent _exec_type;
    
    SimpleComponent_Servant (
      ::Example::CCM_SimpleComponent_ptr executor,
      ::Components::CCMHome_ptr h,
      const char * ins_name,
      ::CIAO::Home_Servant_Impl_Base *hs,
      ::CIAO::Container_ptr c);
    
    virtual ~SimpleComponent_Servant (void);
    
    virtual void
    set_attributes (const ::Components::ConfigValues & descr);
    
    // Supported operations and attributes.
    
    // Ports code.
    
    // Facets.
    
    // Receptacles.
    
    // Event publishers.
    
    // Event consumers.
  
  public:
    // Servant class for the tcpip_read_test_data consumer.
    class SIMPLECOMPONENT_SVNT_Export TestData_DDSConsumer_tcpip_read_test_data_Servant
      : public virtual ::POA_Outer::TestData_DDSConsumer
    {
    public:
      TestData_DDSConsumer_tcpip_read_test_data_Servant (
        ::Example::CCM_SimpleComponent_ptr executor,
        ::Example::CCM_SimpleComponent_Context_ptr c);
      
      virtual ~TestData_DDSConsumer_tcpip_read_test_data_Servant (void);
      
      virtual void
      push_TestData_DDS (
        ::Outer::TestData_DDS * evt);
      
      // Inherited from ::Components::EventConsumerBase.
      virtual void
      push_event ( ::Components::EventBase * ev);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual void
      ciao_push_event ( ::Components::EventBase * ev,
                       const char * source_id,
                       ::CORBA::TypeCode_ptr tc);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual ::CORBA::Boolean
      ciao_is_substitutable (const char * event_repo_id);
      
      // Get component implementation.
      virtual ::CORBA::Object_ptr
      _get_component (void);
    
    protected:
      ::Example::CCM_SimpleComponent_var
      executor_;
      
      ::Example::CCM_SimpleComponent_Context_var
      ctx_;
    };
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    get_consumer_tcpip_read_test_data (void);
  
  private:
    ::Components::EventConsumerBase_ptr
    get_consumer_tcpip_read_test_data_i (void);
  
  private:
    ::Outer::TestData_DDSConsumer_var
    consumes_tcpip_read_test_data_;
  
  public:
    // Servant class for the corba_read_test_data consumer.
    class SIMPLECOMPONENT_SVNT_Export TestData_DDSConsumer_corba_read_test_data_Servant
      : public virtual ::POA_Outer::TestData_DDSConsumer
    {
    public:
      TestData_DDSConsumer_corba_read_test_data_Servant (
        ::Example::CCM_SimpleComponent_ptr executor,
        ::Example::CCM_SimpleComponent_Context_ptr c);
      
      virtual ~TestData_DDSConsumer_corba_read_test_data_Servant (void);
      
      virtual void
      push_TestData_DDS (
        ::Outer::TestData_DDS * evt);
      
      // Inherited from ::Components::EventConsumerBase.
      virtual void
      push_event ( ::Components::EventBase * ev);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual void
      ciao_push_event ( ::Components::EventBase * ev,
                       const char * source_id,
                       ::CORBA::TypeCode_ptr tc);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual ::CORBA::Boolean
      ciao_is_substitutable (const char * event_repo_id);
      
      // Get component implementation.
      virtual ::CORBA::Object_ptr
      _get_component (void);
    
    protected:
      ::Example::CCM_SimpleComponent_var
      executor_;
      
      ::Example::CCM_SimpleComponent_Context_var
      ctx_;
    };
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    get_consumer_corba_read_test_data (void);
  
  private:
    ::Components::EventConsumerBase_ptr
    get_consumer_corba_read_test_data_i (void);
  
  private:
    ::Outer::TestData_DDSConsumer_var
    consumes_corba_read_test_data_;
  
  public:
    // Servant class for the dds_read_test_data consumer.
    class SIMPLECOMPONENT_SVNT_Export TestData_DDSConsumer_dds_read_test_data_Servant
      : public virtual ::POA_Outer::TestData_DDSConsumer
    {
    public:
      TestData_DDSConsumer_dds_read_test_data_Servant (
        ::Example::CCM_SimpleComponent_ptr executor,
        ::Example::CCM_SimpleComponent_Context_ptr c);
      
      virtual ~TestData_DDSConsumer_dds_read_test_data_Servant (void);
      
      virtual void
      push_TestData_DDS (
        ::Outer::TestData_DDS * evt);
      
      // Inherited from ::Components::EventConsumerBase.
      virtual void
      push_event ( ::Components::EventBase * ev);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual void
      ciao_push_event ( ::Components::EventBase * ev,
                       const char * source_id,
                       ::CORBA::TypeCode_ptr tc);
      
      // CIAO-specific in ::Components::EventConsumerBase.
      virtual ::CORBA::Boolean
      ciao_is_substitutable (const char * event_repo_id);
      
      // Get component implementation.
      virtual ::CORBA::Object_ptr
      _get_component (void);
    
    protected:
      ::Example::CCM_SimpleComponent_var
      executor_;
      
      ::Example::CCM_SimpleComponent_Context_var
      ctx_;
    };
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    get_consumer_dds_read_test_data (void);
  
  private:
    ::Components::EventConsumerBase_ptr
    get_consumer_dds_read_test_data_i (void);
  
  private:
    ::Outer::TestData_DDSConsumer_var
    consumes_dds_read_test_data_;
    
    // Event emitters.
    
    virtual void
    connect_app_op_tcpip (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_tcpip (void);
    
    virtual void
    connect_app_op_corba (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_corba (void);
    
    virtual void
    connect_app_op_dds (
      ::Outer::TestData_DDSConsumer_ptr c);
    
    virtual ::Outer::TestData_DDSConsumer_ptr
    disconnect_app_op_dds (void);
    
    // Component attributes.
    
    // Base class overrides.
  
  public:
    virtual ::Components::Cookie *
    connect (const char * name,
             ::CORBA::Object_ptr connection);
    
    virtual ::CORBA::Object_ptr
    disconnect (const char * name,
                ::Components::Cookie * ck);
    
    virtual ::Components::ReceptacleDescriptions *
    get_all_receptacles (void);
    
    virtual ::Components::Cookie *
    subscribe (const char * publisher_name,
               ::Components::EventConsumerBase_ptr subscriber);
    
    virtual ::Components::EventConsumerBase_ptr
    unsubscribe (const char * publisher_name,
                 ::Components::Cookie * ck);
    
    virtual void
    connect_consumer (const char * emitter_name,
                      ::Components::EventConsumerBase_ptr consumer);
    
    virtual ::Components::EventConsumerBase_ptr
    disconnect_consumer (const char * source_name);
    
    virtual ::Components::PublisherDescriptions *
    get_all_publishers (void);
    
    virtual ::Components::EmitterDescriptions *
    get_all_emitters (void);
    
    // CIAO-specific.
    ::CORBA::Object_ptr
    get_facet_executor (const char * name);
  
  private:
    void
    populate_port_tables (void);
  
  private:
    ACE_CString ins_name_;
  };
  
  extern "C" SIMPLECOMPONENT_SVNT_Export ::PortableServer::Servant
  create_Example_SimpleComponent_Servant (
    ::Components::EnterpriseComponent_ptr p,
    ::CIAO::Container_ptr c,
    const char * ins_name);
}

namespace CIAO_Example_SimpleComponent_Impl
{
  class SIMPLECOMPONENT_SVNT_Export SimpleComponentHome_Servant
    : public virtual
        ::CIAO::Home_Servant_Impl<
          ::POA_Example::SimpleComponentHome,
          ::Example::CCM_SimpleComponentHome,
          SimpleComponent_Servant>
  {
  public:
    SimpleComponentHome_Servant (
      ::Example::CCM_SimpleComponentHome_ptr exe,
      const char * ins_name,
      ::CIAO::Container_ptr c);
    
    virtual ~SimpleComponentHome_Servant (void);
    
    // All operations and attributes.
    
    // Factory operations.
    
    // Finder operations.
  };
  
  extern "C" SIMPLECOMPONENT_SVNT_Export ::PortableServer::Servant
  create_Example_SimpleComponentHome_Servant (
    ::Components::HomeExecutorBase_ptr p,
    ::CIAO::Container_ptr c,
    const char * ins_name);
}

#include /**/ "ace/post.h"

#endif /* ifndef */

