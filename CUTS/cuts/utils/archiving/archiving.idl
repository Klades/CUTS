// -*- IDL -*-

//=============================================================================
/**
 * @file          archiving.idl
 *
 * $Id$
 *
 * @author        James H. Hill
 */
//=============================================================================

#ifndef _CUTS_ARCHIVING_IDL_
#define _CUTS_ARCHIVING_IDL_

#include "cuts/idl/UUID.idl"

module CUTS
{
  exception OperationFailed { };

  /// Type definition for the result data.
  typedef sequence <octet> BinaryData;

  /**
   * @struct TestProfile
   *
   * Details about the test results. This allows the test archiving
   * agent to allocate space for the result's data, which is uploaded
   * using the TestUploader interface.
   */
  struct TestProfile
  {
    /// Unique ID for the test.
    CUTS::UUID uuid;

    /// Name of the test.
    string name;
  };

  /// Type definition for a collection of test profiles.
  typedef sequence <CUTS::TestProfile> TestProfiles;

  /**
   * @interface TestUploader
   *
   * Interface for uploading data for the results.
   */
  interface TestUploader
  {
    /**
     * Send data for the test results. This method is invoked multiple
     * times to send chunks of data to the archiver.
     *
     * @param[in]       data          Test result data.
     */
    void send_data (in BinaryData packet)
      raises (OperationFailed);
  };

  /**
   * @struct DownloadRequest
   */
  struct DownloadRequest
  {
    /// UUID of the test to download.
    CUTS::UUID uuid;

    /// Size of each chunk in download.
    unsigned long chunk_size;
  };

  /**
   * @interface TestRetriever
   *
   * Interface for downloading a test from the archive.
   */
  interface TestRetriever
  {

    /**
     * Retreive the next packet of data.
     *
     * @param[out]      packet        Data packet with test data.
     * @retval          true          More data to download
     * @retval          false         No more data to download.
     */
    boolean recv_data (out BinaryData packet)
      raises (OperationFailed);
  };

  /**
   * @interface TestArchiveBrowser
   *
   * Interface for browsing test profiles in the database. The
   * browser acts like an iterator.
   */
  interface TestArchiveBrowser
  {
    /// Attribute for retrieving the iterator's state.
    readonly attribute boolean done;

    /**
     * Get the next set of profiles.
     *
     * @param[out]        profiles        List of profiles.
     * @retval            true            More profiles remain.
     * @retval            false           No more profiles remain.
     */
    boolean get_next (out TestProfiles profiles)
      raises (OperationFailed);

    /// Reset the iterator.
    void reset ();
  };

  /**
   * @interface TestArchive
   *
   * Interface for interacting with the CUTS test archiving agent. Right
   * now, you can only upload results. Eventually, you will be able to fully
   * manage results remotely.
   */
  interface TestArchive
  {
    exception InvalidFile { };

    exception UploadAlreadyActive { };

    exception UploadFailed { };

    exception TestNotExist { };

    /**
     * Upload test results to the database.
     *
     * @param[in]       info        Preliminary info about the results
     * @return          Agent for uploading the result's data.
     */
    TestUploader begin_upload (in TestProfile info)
      raises (InvalidFile, UploadAlreadyActive);

    /**
     * Nofity the test archiver that the upload is complete. This
     * allows the object to finalize the upload, and release the
     * necessary resources.
     *
     * @param[in]       agent       Agent used to upload results.
     */
    void upload_complete (in TestUploader agent);

    /**
     * Begin downloading a new test.
     *
     * @param[in]       req         Client's download request.
     * @return          Reference to download agent.
     */
    TestRetriever begin_download (in DownloadRequest req)
      raises (TestNotExist);

    /**
     * Destroy the download object.
     *
     * @param[in]       retreiver   Object used to download test.
     */
    void download_complete (in TestRetriever retriever);

    /**
     * Create a new iterator for browsing the archive.
     *
     * @param[in]       size        Batch processing size.
     * @return          Reference to browser servant.
     */
    TestArchiveBrowser create_broswer (in unsigned long size);

    /**
     * Destroy the browser object.
     *
     * @param[in]       browser     Browser object to destroy.
     */
    void destroy_browser (in TestArchiveBrowser browser);
  };
};

#endif  // !defined _CUTS_ARCHIVING_IDL_
