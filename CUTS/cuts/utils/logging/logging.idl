// -*- IDL -*-

//=============================================================================
/**
 * @file        logging.idl
 *
 * $Id$
 *
 * @author      James H. Hill
 */
//=============================================================================

#ifndef _CUTS_CUTS_LOGGING_IDL_
#define _CUTS_CUTS_LOGGING_IDL_

#include "cuts/exceptions.idl"
#include "cuts/TimeValue.idl"
#include "cuts/UUID.idl"

module CUTS
{
  /// Type definition of the message's text. We use a sequence of char's
  /// instead of a string so we can amortize calculating the length of
  /// the data. Also, we want the data store to act like a buffer, as opposed
  /// to a string object.
  typedef sequence <char> MessageText;

  /**
   * @struct LogMessage
   *
   * Log message send from an application to the logger client.
   */
  struct LogMessage
  {
    /// Timestamp of the log message.
    CUTS::TimeValue timestamp;

    /// Priority of the log message.
    long severity;

    /// The actual content of the log message.
    MessageText message;
  };

  typedef sequence <LogMessage> LogMessages;

  /**
   * @struct TestLogMessage
   *
   * Log message send from a test logging client to a server.
   */
  struct LogMessagePacket
  {
    /// UUID of the test log message.
    CUTS::UUID uuid;

    /// Host that is sending the log message.
    string hostname;

    /// Collection of messages to send to the server.
    CUTS::LogMessages messages;
  };

  /**
   * @interface TestLoggerServer
   *
   * Interface to remotely interacting with the test logging server.
   */
  interface TestLoggerServer
  {
    /**
     * Send a message packet to the logging server.
     *
     * @param[in]     packet      Message packet containing messages.
     */
    void send_message_packet (in LogMessagePacket packet);
  };

  /**
   * @interface TestLoggerClient
   *
   * Query interface for the test logger client. This is the interface
   * application use to located the correct test logger factory for their
   * specific test.
   */
  interface TestLoggerClient
  {
    /**
     * Register a server test logger server under the specified UUID. This
     * is a one-time only function.
     *
     * @param[in]       uid           UUID of the test
     * @param[in]       server        Reference to logger server
     */
    void register_server (in UUID uid,
                          in TestLoggerServer server)
      raises (DuplicationRegistration,
              RegistrationFailed,
              InvalidRegistration);

    /**
     * Unregister the server with the logger client.
     *
     * @param[in]       uid           UUID of the test
     * @param[in]       server        Reference to logger server
     */
    void unregister_server (in UUID uid)
      raises (RegistrationNotFound);
  };
};

#endif  // !defined _CUTS_CUTS_LOGGING_IDL_
