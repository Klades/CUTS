#include "Setaf_Code_Generator.h"
#include <algorithm>

//
// CUTS_Setaf_Code_Generator
//
CUTS_Setaf_Code_Generator::CUTS_Setaf_Code_Generator (const char * output_dir,
                                                      const char * adapter_name)
 :output_dir_ (output_dir),
  adapter_name_ (adapter_name)
{

}

//
// ~CUTS_Setaf_Code_Generator
//
CUTS_Setaf_Code_Generator::~CUTS_Setaf_Code_Generator (void)
{

}

//
// generate_workspace
//
void CUTS_Setaf_Code_Generator::generate_workspace (void)
{
  std::string pathname (this->output_dir_);
  pathname += "/" + this->adapter_name_ + ".mwc";

  // Open the workspace file for writing.
  this->ctx_.workspace_.open (pathname.c_str ());

  // Begginging of the workspace

  this->ctx_.workspace_
    << "// -*- MWC -*-" << std::endl
    << std::endl
    << "//===================================================================" << std::endl
    << "// Makefile, Project, and Workspace Creator File" << std::endl
    << "//" << std::endl
    << "// Please do not modify the contents of this file under" << std::endl
    << "// any circumstances. Doing so can result in failure to" << std::endl
    << "// successfully build parts of (or the entire) workspace." << std::endl
    << "//===================================================================" << std::endl
    << std::endl
    << "workspace (" << this->adapter_name_ << ") {" << std::endl
    << "  // -- initialize the includes for the project." << std::endl
    << "  cmdline += -include $CUTS_ROOT/MPC/config \\" << std::endl
    << "             -feature_file $CUTS_ROOT/default.features \\" << std::endl
    << std::endl
    << "  " << this->adapter_name_ << ".mpc" << std::endl
    << "}" << std::endl
    << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("end of auto-generated workspace")
    << std::endl;

    this->ctx_.workspace_.close ();
}

//
// generate_project
//
void CUTS_Setaf_Code_Generator::generate_project (void)
{
  std::string pathname (this->output_dir_);
  pathname += "/" + this->adapter_name_ + ".mpc";

  std::string class_export = this->adapter_name_;
  std::transform (class_export.begin (),
                  class_export.end (),
                  class_export.begin (),
                  &::toupper);

  // Open the project file for writing.
  this->ctx_.project_.open (pathname.c_str());

  // Startup comments
  this->ctx_.project_
    << CUTS_SETAF_CPP::single_line_comment ("This project file was generated by")
    << CUTS_SETAF_CPP::single_line_comment ("$Id$")
    << std::endl
    << "project (" << this->adapter_name_
    << ") : acelib {" << std::endl
    << "  sharedname    = " << this->adapter_name_ << std::endl
    << std::endl
    << "  dynamicflags += " << class_export << "_BUILD_DLL" << std::endl
    << "  includes += $(CUTS_ROOT)" << std::endl
    << "  includes += $(ADBC_ROOT)" << std::endl
    << "  libpaths += $(CUTS_ROOT)/lib" << std::endl
    << "  libs += CUTS_Unite_Common" << std::endl
    << std::endl
    << "  Source_Files {" << std::endl
    << "    " << this->adapter_name_ << ".cpp" << std::endl
    << "  }" << std::endl
    << "}" << std::endl;

  this->ctx_.workspace_.close ();
}

//
// generate_header
//
void CUTS_Setaf_Code_Generator::generate_header (void)
{
  this->generate_includes ();
  this->generate_header_body ();
  this->generate_header_end ();
}

//
// generate_source
//
void CUTS_Setaf_Code_Generator::generate_source (void)
{
  this->generate_init_method ();
  this->generate_reset_method ();
  this->generate_close_method ();
  this->generate_update_log_format ();
  this->generate_update_relations ();
  this->generate_update_variable_values ();
  this->generate_end_of_source ();
}

//
// open_files
//
void CUTS_Setaf_Code_Generator::open_files (void)
{
  // Construct the name of the file.
  std::string source_name (this->output_dir_);
  source_name += "/" + this->adapter_name_ + ".cpp";
  std::string header_name (this->output_dir_);
  header_name += "/" + this->adapter_name_ + ".h";

  // Open all the files for writing.
  this->ctx_.source_.open (source_name.c_str ());
  this->ctx_.source_formatter_.reset (new CUTS_SETAF_CPP::Context::formatter_type (this->ctx_.source_));

  this->ctx_.header_.open (header_name.c_str ());
  this->ctx_.header_formatter_.reset (new CUTS_SETAF_CPP::Context::formatter_type (this->ctx_.header_));

}

//
// close_files
//
void CUTS_Setaf_Code_Generator::close_files (void)
{
  this->ctx_.header_formatter_.reset ();

  if (this->ctx_.header_.is_open ())
    this->ctx_.header_.close ();

  this->ctx_.source_formatter_.reset ();

  if (this->ctx_.source_.is_open ())
    this->ctx_.source_.close ();

}

//
// generate_includes
//
void CUTS_Setaf_Code_Generator::generate_includes (void)
{
  // Generate the hash definition for this file.
  std::string hashdef = "_" + this->adapter_name_ + "_H_";
  std::transform (hashdef.begin (),
                  hashdef.end (),
                  hashdef.begin (),
                  &::toupper);

  std::string export_name = this->adapter_name_ + "_export";

  // specifing include files

  this->ctx_.header_
    << "// -*- C++ -*-" << std::endl
    << std::endl
    << "#ifndef " << hashdef << std::endl
    << "#define " << hashdef << std::endl
    << std::endl
    << "#if !defined (ACE_LACKS_PRAGMA_ONCE)" << std::endl
    << "#pragma once" << std::endl
    << "#endif /* ACE_LACKS_PRAGMA_ONCE */" << std::endl
    << std::endl
    << CUTS_SETAF_CPP::include ("ace/OS_Memory")
    << CUTS_SETAF_CPP::include ("cuts/utils/unite/Log_Format_Adapter")
    << CUTS_SETAF_CPP::include (export_name) << std::endl
    << std::endl;

  this->ctx_.source_
    << CUTS_SETAF_CPP::include (this->adapter_name_)
    << CUTS_SETAF_CPP::include ("ace/svc_export")
    << CUTS_SETAF_CPP::include ("ace/CORBA_macros")
    << CUTS_SETAF_CPP::include ("cuts/utils/unite/Log_Format")
    << CUTS_SETAF_CPP::include ("cuts/utils/unite/Variable")
    << std::endl
    << std::endl;
}

//
// generate_header_body
//
void CUTS_Setaf_Code_Generator::generate_header_body (void)
{
  std::string class_export = this->adapter_name_;
  std::transform (class_export.begin (),
                  class_export.end (),
                  class_export.begin (),
                  &::toupper);
  class_export += "_Export";

  // Generating the function declarations

  this->ctx_.header_
    << "class " << class_export << " "
    << this->adapter_name_  << " :" << " public CUTS_Log_Format_Adapter" << std::endl
    << "{" << std::endl
    << "public:" << std::endl
    << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("init method")
    << "  void init ();" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Update the log format by adding variables")
    << "  void update_log_format (CUTS_Log_Format * lfmt);" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Update the log format by adding new relations")
    << "  void update_relations (CUTS_Log_Format * lfmt);" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Update the variable values")
    << "  void update_values (CUTS_Log_Format_Variable_Table & vars," << std::endl
    << "  CUTS_Log_Format * lfmt);" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Reset the adapter")
    << "  void reset ();" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Close the adapter")
    << "  void close ();" << std::endl
    << std::endl
    << "private:" << std::endl;

  // Generating the member variable declarations

  std::vector<std::string>::iterator it;

  for(it = this->variable_decls_.begin(); it != this->variable_decls_.end(); it++)
  {
    this->ctx_.header_
      << "  "
      << (std::string)(*it);
  }
  this->ctx_.header_
    << std::endl
    << "};";
}

//
// generate_header_end
//
void CUTS_Setaf_Code_Generator::generate_header_end (void)
{
  // Finla part of the header file

  std::string class_export = this->adapter_name_;
  std::transform (class_export.begin (),
                  class_export.end (),
                  class_export.begin (),
                  &::toupper);
  class_export += "_Export";

  this->ctx_.header_
    << CUTS_SETAF_CPP::single_line_comment ("Declares the create method for dynamically loading the adapter")
    << "CUTS_LOG_FORMAT_ADAPTER_EXPORT_DECL ("<< class_export <<");"
    << std::endl;

  std::string hashdef = "_" + this->adapter_name_ + "_H_";
  std::transform (hashdef.begin (),
                  hashdef.end (),
                  hashdef.begin (),
                  &::toupper);

  this->ctx_.header_
    << "#endif /* " << hashdef << " */" << std::endl;

}

//
// generate_init_method
//
void CUTS_Setaf_Code_Generator::generate_init_method (void)
{
  // Generating the adapter initicalizing code.

  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("Init method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::init (void)" << std::endl
    << "{"
    << this->init_str_
    << "}"
    << std::endl;
}

//
// generate_reset_method
//
void CUTS_Setaf_Code_Generator::generate_reset_method (void)
{
  // Generating the adapter resetting code.
  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("Reset method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::reset (void)" << std::endl
    << "{"
    << this->reset_str_
    << "}"
    << std::endl;
}

//
// generate_close_method
//
void CUTS_Setaf_Code_Generator::generate_close_method (void)
{
  // Generate the close method in the adapter

  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("Close method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::close (void)" << std::endl
    << "{" << std::endl
    << "  delete this;" << std::endl
    << "}" << std::endl
    << std::endl;
}

//
// generate_update_log_format
//
void CUTS_Setaf_Code_Generator::generate_update_log_format (void)
{
  // Generate the update log format part of the adapter. Datapoints
  // in the adpater converted to this code.

  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("update_log_format method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::update_log_format (CUTS_Log_Format * lfmt)" << std::endl
    << "{" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Get the name of the log format")
    << "const ACE_CString & name = lfmt->name ();"
    << CUTS_SETAF_CPP::single_line_comment ("Check whether this is an adaptive log format")
    << CUTS_SETAF_CPP::single_line_comment ("The log format will be adapted by adding new variables");

  unsigned int i = 0;

  // The first one is with if part

  this->ctx_.source_
    << "if (name == \"" << this->entries_.at (0)->name () << "\")"
    << "{"
    << "  this->add_variable (lfmt, \""
    << this->entries_.at (0)->id () << "\", \""
    << this->entries_.at (0)->type ()<< "\");"
    << "}";

  // All the remaining ones are with else if

  for(i=1; i < this->entries_.size(); i++)
  {
    this->ctx_.source_
      << "else if (name == \"" <<this->entries_.at (i)->name () << "\")"
      << "{"
      << "  this->add_variable (lfmt, \""
      << this->entries_.at (i)->id () << "\", \""
      << this->entries_.at (i)->type ()<< "\");"
      << "}";
  }
  this->ctx_.source_
    << "else" <<std::endl
    << "  return;"
    <<"}"
    << std::endl;
}

//
// generate_update_relations
//
void CUTS_Setaf_Code_Generator::generate_update_relations (void)
{
  // Generate the update relations part of the adapter. Relations
  // in the adpater converted to this code.

  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("update_log_format_relations method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::update_relations (CUTS_Log_Format * lfmt)" << std::endl
    << "{" << std::endl
    << CUTS_SETAF_CPP::single_line_comment ("Get the name of the log format")
    << "const ACE_CString & name = lfmt->name ();"
    << CUTS_SETAF_CPP::single_line_comment ("Get the name of the log format")
    << CUTS_SETAF_CPP::single_line_comment ("New causlilities will be created and added");

  unsigned int i = 0;

  // The first one is with if part

  this->ctx_.source_
    << "if (name == \"" << this->relations_.at (0)->cause_lf() << "\")"
    << "{"
    << "  this->add_relation (lfmt, \""
    <<  this->relations_.at (0)->effect_lf () << "\", \""
    <<  this->relations_.at (0)->cause_var () << "\", \""
    <<  this->relations_.at (0)->effect_var () << "\");"
    << "}";

  // All the remaining ones are with else if

  for(i=1; i < this->relations_.size(); i++)
  {
    this->ctx_.source_
    << "else if (name == \"" << this->relations_.at (i)->cause_lf() << "\")"
    << "{"
    << "  this->add_relation (lfmt, \""
    <<  this->relations_.at (i)->effect_lf () << "\", \""
    <<  this->relations_.at (i)->cause_var () << "\", \""
    <<  this->relations_.at (i)->effect_var () << "\");"
    << "}";
  }
  this->ctx_.source_
    << "else" <<std::endl
    << "  return;"
    <<"}"
    << std::endl;
}

//
// generate_update_variable_values
//
void CUTS_Setaf_Code_Generator::generate_update_variable_values ()
{
  // Generate the update values part of the adapter. Adaptation code
  // in the adpater converted to this code.

  this->ctx_.source_
    << CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("update_values method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    << "void " << this->adapter_name_ <<"::update_values (" << std::endl
    << "  CUTS_Log_Format_Variable_Table & vars, CUTS_Log_Format * lfmt)" << std::endl
    << "{" << std::endl
    << "const ACE_CString & name = lfmt->name ();";

  // The first one is with if part
  unsigned int i = 0;

  this->ctx_.source_
    << "if (name == \"" << this->setaf_code_.at (0)->code_id () << "\")"
    << "{"
    << this->setaf_code_.at (0)->adaptation_code ()
    << "}";

  // All the remaining ones are with else if
  for (i=1; i < this->setaf_code_.size(); i++)
  {
    this->ctx_.source_
    << "else if (name == \"" << this->setaf_code_.at (i)->code_id () << "\")"
    << "{"
    << this->setaf_code_.at (i)->adaptation_code ()
    << "}";

  }
  this->ctx_.source_
    << "else" << std::endl
    << " return;"
    << "}";
}

//
// generate_end_of_source
//
void CUTS_Setaf_Code_Generator::generate_end_of_source ()
{
  // Generate the update values part of the adapter. Adaptation code
  // in the adpater converted to this code.

  this->ctx_.source_
    <<CUTS_SETAF_CPP::single_line_comment ("")
    << CUTS_SETAF_CPP::single_line_comment ("create method")
    << CUTS_SETAF_CPP::single_line_comment ("")
    <<"CUTS_Log_Format_Adapter  * create_Cuts_Log_Format_Adapter (void)" << std::endl
    <<"{"
    <<"CUTS_Log_Format_Adapter * adapter = 0;"
    <<"ACE_NEW_RETURN (adapter, " << this->adapter_name_ << ", 0);"
    <<"return adapter;"
    <<"}";
}